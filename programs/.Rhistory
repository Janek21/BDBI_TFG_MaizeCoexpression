root_hair_zone_f7=as.integer(repl_meta$location=="f7_root.hair.zone"),
seed_10_dap_f7=as.integer(repl_meta$location=="f7_seed.10.dap"),
seed_15_dap_f7=as.integer(repl_meta$location=="f7_seed.15.dap"),
seed_20_dap_f7=as.integer(repl_meta$location=="f7_seed.20.dap"),
seed_25_dap_f7=as.integer(repl_meta$location=="f7_seed.25.dap"),
seed_30_dap_f7=as.integer(repl_meta$location=="f7_seed.30.dap"),
seminal_root_f7=as.integer(repl_meta$location=="f7_seminal.root"),
silk_f7=as.integer(repl_meta$location=="f7_silk"),
cob_pe75=as.integer(repl_meta$location=="pe75_cob"),
coleoptile_pe75=as.integer(repl_meta$location=="pe75_coleoptile"),
crown_root_pe75=as.integer(repl_meta$location=="pe75_crown.root"),
first_elongated_internode_pe75=as.integer(repl_meta$location=="pe75_first.elongated.internode"),
flag_leaf_pe75=as.integer(repl_meta$location=="pe75_flag.leaf"),
immature_cob_pe75=as.integer(repl_meta$location=="pe75_immature.cob"),
immature_tassel_pe75=as.integer(repl_meta$location=="pe75_immature.tassel"),
leaf_1_pe75=as.integer(repl_meta$location=="pe75_leaf.1"),
leaf_3_blade_pe75=as.integer(repl_meta$location=="pe75_leaf.3.blade"),
leaf_3_sheath_pe75=as.integer(repl_meta$location=="pe75_leaf.3.sheath"),
leaf_5_pe75=as.integer(repl_meta$location=="pe75_leaf.5"),
leaf_5_elongation_zone_pe75=as.integer(repl_meta$location=="pe75_leaf.5.elongation.zone"),
leaf_5_mature_pe75=as.integer(repl_meta$location=="pe75_leaf.5.mature"),
leaf_5_meristem_pe75=as.integer(repl_meta$location=="pe75_leaf.5.meristem"),
leaf_8_pe75=as.integer(repl_meta$location=="pe75_leaf.8"),
mature_seed_40_dap_pe75=as.integer(repl_meta$location=="pe75_mature.seed.40.dap"),
meotic_tassel_pe75=as.integer(repl_meta$location=="pe75_meotic.tassel"),
mesophyll_pe75=as.integer(repl_meta$location=="pe75_mesophyll"),
prepollinated_cob_pe75=as.integer(repl_meta$location=="pe75_prepollinated.cob"),
primary_root_pe75=as.integer(repl_meta$location=="pe75_primary.root"),
primary_root_elongation_zone_pe75=as.integer(repl_meta$location=="pe75_primary.root.elongation.zone"),
primary_root_meristematic_zone_pe75=as.integer(repl_meta$location=="pe75_primary.root.meristematic.zone"),
root_hair_zone_pe75=as.integer(repl_meta$location=="pe75_root.hair.zone"),
seed_10_dap_pe75=as.integer(repl_meta$location=="pe75_seed.10.dap"),
seed_15_dap_pe75=as.integer(repl_meta$location=="pe75_seed.15.dap"),
seed_20_dap_pe75=as.integer(repl_meta$location=="pe75_seed.20.dap"),
seed_25_dap_pe75=as.integer(repl_meta$location=="pe75_seed.25.dap"),
seed_30_dap_pe75=as.integer(repl_meta$location=="pe75_seed.30.dap"),
seminal_root_pe75=as.integer(repl_meta$location=="pe75_seminal.root"),
silk_pe75=as.integer(repl_meta$location=="pe75_silk")
)
rownames(bin_metadata)<-rownames(Nrepl_data)
bin_metadata<-bin_metadata[,colSums(bin_metadata)>=1]#if any rtissue is not present in sample, it will be introduced in binarization, as a full 0 column, remove it again
nTissues <- nrow(Nrepl_data)
nGenes <- ncol(Nrepl_data)
MT_cor<-cor(module_eigengenes, bin_metadata, use="p")
module.trait.corr.pvals <- corPvalueStudent(MT_cor, nTissues)
heatmap.data <- merge(module_eigengenes, bin_metadata, by = 'row.names')
head(heatmap.data)
rownames(heatmap.data)<-heatmap.data$Row.names
heatmap.data$Row.names<-NULL
head(heatmap.data)
plotTitle<-paste0("Correlation plot by species using ", NormType)
#png(paste0("./CorPlots/", specie, "_", NormType, "_corplot.png"), width=1600, height=800) #B73_CPM_corplot
CorLevelPlot(heatmap.data,
x = names(bin_metadata),
y = names(module_eigengenes),
titleX="Traits", titleY="Modules", main=plotTitle,
rotLabX = 45, rotTitleY = 90,
cexCorval = 0.4, cexLabY = 0.7, cexLabX = 0.7
)
#dev.off()
s_bin_metadata<-bin_metadata
s_bin_metadata <- s_bin_metadata[, sort(names(s_bin_metadata))]
s_bin_metadata <- s_bin_metadata[order(rownames(s_bin_metadata)), ]
heatmap.data <- merge(module_eigengenes, s_bin_metadata, by = 'row.names')
head(heatmap.data)
rownames(heatmap.data)<-heatmap.data$Row.names
heatmap.data$Row.names<-NULL
head(heatmap.data)
plotTitle<-paste0("Correlation plot by tissue using ", NormType)
#png(paste0("./CorPlots/", specie, "_", NormType, "_corplot.png"), width=1600, height=800) #B73_CPM_corplot
CorLevelPlot(heatmap.data,
x = names(s_bin_metadata),
y = names(module_eigengenes),
titleX="Traits", titleY="Modules", main=plotTitle,
rotLabX = 45, rotTitleY = 90,
cexCorval = 0.0, cexLabY = 0.7, cexLabX = 0.7
)
#dev.off()
s_bin_metadata<-bin_metadata
s_bin_metadata <- s_bin_metadata[, sort(names(s_bin_metadata))]
s_bin_metadata <- s_bin_metadata[order(rownames(s_bin_metadata)), ]
heatmap.data <- merge(module_eigengenes, s_bin_metadata, by = 'row.names')
head(heatmap.data)
rownames(heatmap.data)<-heatmap.data$Row.names
heatmap.data$Row.names<-NULL
head(heatmap.data)
plotTitle<-paste0("Correlation plot by tissue using ", NormType)
#png(paste0("./CorPlots/", specie, "_", NormType, "_corplot.png"), width=1600, height=800) #B73_CPM_corplot
CorLevelPlot(heatmap.data,
x = names(s_bin_metadata),
y = names(module_eigengenes),
titleX="Traits", titleY="Modules", main=plotTitle,
rotLabX = 45, rotTitleY = 90,
cexCorval = 0.4, cexLabY = 0.7, cexLabX = 0.7
)
#dev.off()
pheatmap(heatmap.data,
clustering_method = "complete")
fviz_pca_ind(unscaled_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE,
title="Sherry Wine label-classified")
?fviz_pca_ind
??fviz_pca_ind
library(factoextra)
fviz_pca_ind(unscaled_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE,
title="Sherry Wine label-classified")
repl_dvData<-as.data.frame(t(repl_data))
Nrepl_dvData<-as.data.frame(t(Nrepl_data)) #Nrepl_data<-sweep(repl_data, 1, rowSums(repl_data), "/") #converts sample counts into relative frequencies for genes
set.seed(42)
#Unscaled
unscaled_pca <- prcomp(repl_dvData, scale=F)
names(unscaled_pca)
#Scaled
scaled_pca <- prcomp(repl_dvData, scale=T)
names(scaled_pca)
#Normalized
Nrepl_dvData<-scale(Nrepl_dvData)
N_pca<-prcomp(Nrepl_dvData, scale=T)
library(factoextra)
fviz_pca_ind(unscaled_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE,
title="Sherry Wine label-classified")
library(factoextra)
ggplot(unscaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=4)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Unscaled PCA")+
theme_minimal()
View(Nrepl_dvData)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(purl = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(randomcoloR)
library(edgeR)
library(tidyverse)
library(dplyr)
library(grid)
library(gridExtra)
#devtools::install_github("kevinblighe/CorLevelPlot")
library(CorLevelPlot)
library(ggpubr)
#"B73"   "DK105" "EP1"   "F7"    "PE75"
specie<-""
dataPath<-paste0("../data/wlen/data_wlen", specie, ".csv")
metadataPath<-paste0("../data/metadata", specie, ".txt")
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=T, row.names=1, stringsAsFactors=TRUE)
#dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
#metadata<-read.delim("../data/metadata.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
if ("Length" %in% colnames(dataNL)){
length_vec<-dataNL$Length
}
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
outDetect<-goodSamplesGenes(t(dataNL))
table(outDetect$goodGenes) #False genes are outliers
table(outDetect$goodSamples) #All samples are True = no outliers
dataNL<-dataNL[outDetect$goodGenes==TRUE,] #remove ouliers
if (exists("length_vec")){ #only if it exists
length_vec<-length_vec[outDetect$goodGenes==TRUE] #if length_vec exists remove outliers from there as well
}
#add the name of the species to the replicate, to be able to differentiate it
#save location
metadata$org_location<-as.factor(metadata$location)
#create specialized location
metadata$location<-paste(metadata$specie, metadata$location, sep="_")
metadata$location<-as.factor(metadata$location)
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns that belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
if (1<ncol(data.frame(data))){ #If theres only 1 replicate, dont try to do the mean (it gives error)
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
}
return(as.data.frame(data))
}
tissue_data<-levels(metadata$location) #get list of tissue names
d_joint<-sapply(tissue_data, function(tissue_name) rsumer(dataNL, metadata, tissue_name)) #returns an array where each entry is a column with the mean data of the replicates (rows are genes)
repl_data<-as.data.frame(d_joint) #data joint by replicate
colnames(repl_data) = gsub(pattern = "*.data", replacement = "", x = tolower(colnames(repl_data))) #get column names to be only location
rownames(repl_data)<-rownames(dataNL) #rename rows to be genes again
repl_meta<-as.data.frame(colnames(repl_data))
colnames(repl_meta)<-c("location")
temp_meta<-data.frame(t(data.frame(strsplit(as.character(repl_meta$location), "_"))))
repl_meta<-data.frame(repl_meta$location, temp_meta$X1, temp_meta$X2)
colnames(repl_meta)<-c("location", "species", "org_location")
multiColHist<-function(data, location, color_var){ #gets the data table, the concrete column(tissue) and the color for the tissue
loc_var<-data[[location]] #get the tissue data
p<-ggplot(data, aes(x=loc_var))+
geom_histogram(bins = 30, fill=color_var, color="black")+
xlab("")+ylab("")+theme_minimal() #plot a colored histogram for all genes of X tissue
return(p)
}
nn<-seq(1,149, by=15)
colorList<-distinctColorPalette(length(nn)) #make a list with a color for each tissue
#Create a legend that realates each color to a tissue
#use the repl_meta dataframe for creating the plot, as it contains all tissue(location) names
legend_plot<-ggplot(repl_meta[nn,], aes(x=1, y=location, color=location))+
geom_point()+
scale_color_manual(values=colorList)+
guides(color=guide_legend(ncol=1))+
theme_void()+labs(color="Tissue")+
theme(legend.title=element_text(size=18),
legend.text=element_text(size=15)) #plot used only to get the legend that associates colors with localizations(tissues)
legend_var<-get_legend(legend_plot) #place the legend into a variable
RawHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta[nn,])){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(repl_data, loc, color_var)
RawHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " raw data distribution")
raw_Ptab<-arrangeGrob(grobs=RawHistList, ncol=ceiling(nrow(repl_meta[nn,])/6)) #creates a table that organizes the plots
#png(paste0("./DistrPlots/", specie, "_raw_distPlot.png"), width=1600, height=800) #B73_CPM_raw_distPlot
grid.arrange(raw_Ptab, legend_var, widths = c(10, 2.3), ncol=2, top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
#dev.off()
#@@ remove lowly expressed genes
#uses edgeR
dge <- DGEList(repl_data)
#Calculate normalization factors
dge <- calcNormFactors(dge)
#Get normalized counts
Nrepl_data <- cpm(dge, log=TRUE) #rpkm with lengths, testo other normalizations too
NormType<-"CPM"
#Filter low expression genes
#keep<-rowSums(Nrepl_data>1)>=12 #as most lowly expressed genes are slightly above 0(=1), so we filter starting at 1 rep and more than 10 total in samples
keep<-rowSums(Nrepl_data>=0)>=0 #@@ only >=0 erases bell curve
keep<-apply(Nrepl_data, 1, max)>=0
Nrepl_data<-Nrepl_data[keep,]
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
#@@ Less genes kept for similar normality plots in rpkm (b73 tested)
#@@ analyze CPM and RPKN and choose 1
multiColLine<-function(data, location, color_var){ #gets the data table, the concrete column(tissue) and the color for the tissue
loc_var<-data[[location]] #get the tissue data
p<-ggplot(data, aes(x=loc_var))+geom_density(fill=color_var, color="black")+
xlab("")+ylab("")+theme_minimal() #plot a colored line graph for all genes of X tissue
return(p)
}
NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta[nn,])){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta[nn,])/6)) #creates a table that organizes the plots
#png(paste0("./DistrPlots/", specie, "_norm", NormType, "_distPlot.png"), width=1600, height=800) #B73_normCPM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2, top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
#dev.off()
if (exists("length_vec")){ #if we have lengths
length_vec<-data.frame(Length=length_vec) #convert to dataframe
dge <- DGEList(repl_data,genes=length_vec) #use edgeR for normalization
dge <- calcNormFactors(dge)
Nrepl_data <- rpkm(dge, log=TRUE)
Nrepl_data<-as.data.frame(Nrepl_data)
NormType<-"RPKM"
}
#Filter low expression genes
keep<-rowSums(Nrepl_data>=0)>=0 #as most lowly expressed genes are slightly above 0(=1), so we filter starting at 1 rep and more than 5 total in samples
keep<-apply(Nrepl_data, 1, max)>=0
Nrepl_data<-Nrepl_data[keep,]
#@@ Difference between 12 and 6 is important? -> it is we only do rpkm
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
#@@ More genes kept for similar normality plots than cpm (b73 tested)
## Plotting the normalized data counts <-allPLot Title
NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta[nn,])){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta[nn,])/6)) #creates a table that organizes the plots
#png(paste0("./DistrPlots/", specie, "_norm", NormType, "_distPlot.png"), width=1600, height=800) #B73_normCPM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2,  top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
#dev.off()
View(repl_data)
View(Nrepl_data)
repl_dvData<-as.data.frame(t(repl_data))
Nrepl_dvData<-as.data.frame(t(Nrepl_data)) #Nrepl_data<-sweep(repl_data, 1, rowSums(repl_data), "/") #converts sample counts into relative frequencies for genes
View(Nrepl_dvData)
set.seed(42)
#Unscaled
unscaled_pca <- prcomp(repl_dvData, scale=F)
names(unscaled_pca)
#Scaled
scaled_pca <- prcomp(repl_dvData, scale=T)
names(scaled_pca)
#Normalized
Nrepl_dvData<-scale(Nrepl_dvData)
N_pca<-prcomp(Nrepl_dvData, scale=T)
library(factoextra)
ggplot(unscaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=4)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Unscaled PCA")+
theme_minimal()
#Scaled
ggplot(scaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=4)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Scaled PCA")+
theme_minimal()
fviz_pca_ind(scaled_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE,
title="Origin-classified")
fviz_pca_ind(scaled_pca, geom.ind = "point",
habillage = repl_meta$species, addEllipses = TRUE,
title="Origin-classified")
fviz_pca_ind(unscaled_pca, geom.ind = "point",
habillage = repl_meta$species, addEllipses = TRUE,
title="Origin-classified")
#Normalized
ggplot(N_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual(values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal()
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$species, addEllipses = TRUE,
title="Origin-classified")
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE,
title="Origin-classified")
View(repl_meta)
View(Nrepl_data)
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE,
title="Origin-classified")
fviz_pca_ind(N_pca, geom.ind = "point",
addEllipses = TRUE,
title="Origin-classified")
?fviz_pca_ind
fviz_pca_ind(N_pca, geom.ind = "point",
palette = repl_meta$org_location, addEllipses = TRUE,
title="Origin-classified")
fviz_pca_ind(N_pca, geom.ind = "point",
palette = repl_meta$org_location, addEllipses = TRUE, pointshape = 19,
title="Origin-classified")
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE, pointshape = 19,
title="Origin-classified")
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$species, addEllipses = TRUE, pointshape = 19,
title="Tissue-based classification")
library(factoextra)
#Raw
ggplot(unscaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=4)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Unscaled PCA")+
theme_minimal()
#Scaled
ggplot(scaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=4)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Scaled PCA")+
theme_minimal()
#Normalized
ggplot(N_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual(values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal()
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE, pointshape = 19,
title="Tissue-based classification")
library(factoextra)
#Raw
ggplot(unscaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=4)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Unscaled PCA")+
theme_minimal()
#Scaled
ggplot(scaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=4)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Scaled PCA")+
theme_minimal()
#Normalized
ggplot(N_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual(values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal()
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE, pointshape = 19,
title="Tissue-based classification")
library(factoextra)
#Raw
ggplot(unscaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Unscaled PCA")+
theme_minimal()
#Scaled
ggplot(scaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Scaled PCA")+
theme_minimal()
#Normalized
ggplot(N_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual(values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal()
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE, pointshape = 19,
title="Tissue-based classification")
library(plotly)
#Scaled
ggplotly(ggplot(scaled_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual( values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Scaled PCA")+
theme_minimal())
fviz_pca_ind(scaled_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE, pointshape = 19,
title="Tissue-based classification")
#Normalized
ggplotly(ggplot(N_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual(values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal())
#Normalized
ggplotly(ggplot(N_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual(values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal())
#Normalized
ggplotly(ggplot(N_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual(values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal())
