NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta)){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta)/6)) #creates a table that organizes the plots
png(paste0("./DistrPlots/", specie, "_norm", NormType, "_distPlot.png"), width=1600, height=800) #B73_normCPM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2,  top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
dev.off()
Nrepl_data<-t(Nrepl_data)
power <- c(c(1:15), seq(from = 17, to = 50, by = 2))
#power<-c(1:40)
#Network topology analysis
sft <- pickSoftThreshold(Nrepl_data,
powerVector = power,
networkType = "signed",
verbose = 5)
sftIn<-sft$fitIndices
p1<-ggplot(sftIn, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit\nsigned R^2') +
theme_classic()
p2<-ggplot(sftIn, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 1500) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(p1, p2, nrow=2)
print(sft$powerEstimate)
#Use automatic calculation
if (is.na(sft$powerEstimate)){
softPw<-30 #if the soft power is NA, set to 30, else take smallest possible
}else{
softPw <- min(sft$powerEstimate, 30)
}
if (specie=="DK105"){
softPw<-24 #4000
#softPw<-26 #6000
#softPw<-30 #8000
}
temp_cor <- cor
cor <- WGCNA::cor
ModNetwork <- blockwiseModules(Nrepl_data,
nThreads = 32, #16
maxBlockSize = 64000, #directly related to memory, if maxBlockSize<total genes, multiple blocks will have to be used -> worse clustering
deepSplit = 4,
TOMType = "signed", #unsigned?
power = softPw,
mergeCutHeight = 0.3,#0.3->4799#0.8->4799(low module granularity) #0.1->4799(high granularity(lots of colors))
minModuleSize = 20,
numericLabels = FALSE,
pamRespectsDendro = FALSE,
minKMEtoStay = 0.3,#0.3->4799 #0.8->7781 #<0.3 stays the same
randomSeed = 42,
verbose = 4)
cor<-temp_cor
#@@remove gray
module_eigengenes <- ModNetwork$MEs
#get number of genes for each module
table(ModNetwork$colors)
#B73
#cpm 1917/22205 pw:19
#rpkm 2068/24537 pw:19
#rpkm_filtered 1107/25296 pw:17
#DK105 pw:24 #@@recheck powers
#cpm 4364/22386
#rpkm 4823/25044
#rpkm_filtered 4799/25795
#EP1
#cpm 3167/22377 pw:21
#rpkm 2550/25139 pw:19
#rpkm_filtered 3456/25994 pw:21
#F7
#cpm 4329/22592 pw:25
#rpkm 3828/25214 pw:23
#rpkm_filtered 3770/25786 pw:23
#PE75
#cpm 2577/22127 pw:19
#rpkm
#rpkm_filtered
print(softPw)
dim(Nrepl_data)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(purl = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(randomcoloR)
library(edgeR)
library(tidyverse)
library(dplyr)
library(grid)
library(gridExtra)
#devtools::install_github("kevinblighe/CorLevelPlot")
library(CorLevelPlot)
library(ggpubr)
#"B73"   "DK105" "EP1"   "F7"    "PE75"
specie<-"PE75"
dataPath<-paste0("../data/wlen/", specie, ".csv")
metadataPath<-paste0("../data/wlen/", specie, "_m.txt")
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=T, row.names=1, stringsAsFactors=TRUE)
#dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
#metadata<-read.delim("../data/metadata.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
if ("Length" %in% colnames(dataNL)){
length_vec<-dataNL$Length
}
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
outDetect<-goodSamplesGenes(t(dataNL))
table(outDetect$goodGenes) #False genes are outliers
table(outDetect$goodSamples) #All samples are True = no outliers
dataNL<-dataNL[outDetect$goodGenes==TRUE,] #remove ouliers
if (exists("length_vec")){ #only if it exists
length_vec<-length_vec[outDetect$goodGenes==TRUE] #if length_vec exists remove outliers from there as well
}
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns that belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
if (1<ncol(data.frame(data))){ #If theres only 1 replicate, dont try to do the mean (it gives error)
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
}
return(as.data.frame(data))
}
tissue_data<-levels(metadata$location) #get list of tissue names
d_joint<-sapply(tissue_data, function(tissue_name) rsumer(dataNL, metadata, tissue_name)) #returns an array where each entry is a column with the mean data of the replicates (rows are genes)
repl_data<-as.data.frame(d_joint) #data joint by replicate
colnames(repl_data) = gsub(pattern = "*.data", replacement = "", x = tolower(colnames(repl_data))) #get column names to be only location
rownames(repl_data)<-rownames(dataNL) #rename rows to be genes again
repl_meta<-as.data.frame(colnames(repl_data))
colnames(repl_meta)<-c("location")
multiColHist<-function(data, location, color_var){ #gets the data table, the concrete column(tissue) and the color for the tissue
loc_var<-data[[location]] #get the tissue data
p<-ggplot(data, aes(x=loc_var))+
geom_histogram(bins = 30, fill=color_var, color="black")+
xlab("")+ylab("")+theme_minimal() #plot a colored histogram for all genes of X tissue
return(p)
}
colorList<-distinctColorPalette(nrow(repl_meta)) #make a list with a color for each tissue
#Create a legend that realates each color to a tissue
#use the repl_meta dataframe for creating the plot, as it contains all tissue(location) names
legend_plot<-ggplot(repl_meta, aes(x=1, y=location, color=location))+
geom_point()+
scale_color_manual(values=colorList)+
guides(color=guide_legend(ncol=1))+
theme_void()+labs(color="Tissue")+
theme(legend.title=element_text(size=18),
legend.text=element_text(size=15)) #plot used only to get the legend that associates colors with localizations(tissues)
legend_var<-get_legend(legend_plot) #place the legend into a variable
RawHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta)){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(repl_data, loc, color_var)
RawHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " raw data distribution")
raw_Ptab<-arrangeGrob(grobs=RawHistList, ncol=ceiling(nrow(repl_meta)/6)) #creates a table that organizes the plots
png(paste0("./DistrPlots/", specie, "_raw_distPlot.png"), width=1600, height=800) #B73_CPM_raw_distPlot
grid.arrange(raw_Ptab, legend_var, widths = c(10, 2.3), ncol=2, top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
dev.off()
#@@ remove lowly expressed genes
#uses edgeR
dge <- DGEList(repl_data)
#Calculate normalization factors
dge <- calcNormFactors(dge)
#Get normalized counts
Nrepl_data <- cpm(dge, log=TRUE) #rpkm with lengths, testo other normalizations too
NormType<-"CPM"
boxplot(Nrepl_data, las=2)
#We can see that most repetitions are from low-expressed counts, we should remove some
#Filter low expression genes
#keep<-rowSums(Nrepl_data>1)>=12 #as most lowly expressed genes are slightly above 0(=1), so we filter starting at 1 rep and more than 10 total in samples
keep<-rowSums(Nrepl_data>1)>=12
Nrepl_data<-Nrepl_data[keep,]
boxplot(Nrepl_data, las=2)
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
#@@ Less genes kept for similar normality plots in rpkm (b73 tested)
#@@ analyze CPM and RPKN and choose 1
multiColLine<-function(data, location, color_var){ #gets the data table, the concrete column(tissue) and the color for the tissue
loc_var<-data[[location]] #get the tissue data
p<-ggplot(data, aes(x=loc_var))+geom_density(fill=color_var, color="black")+
xlab("")+ylab("")+theme_minimal() #plot a colored line graph for all genes of X tissue
return(p)
}
NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta)){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta)/6)) #creates a table that organizes the plots
png(paste0("./DistrPlots/", specie, "_norm", NormType, "_distPlot.png"), width=1600, height=800) #B73_normCPM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2, top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
dev.off()
if (exists("length_vec")){ #if we have lengths
length_vec<-data.frame(Length=length_vec) #convert to dataframe
dge <- DGEList(repl_data,genes=length_vec) #use edgeR for normalization
dge <- calcNormFactors(dge)
Nrepl_data <- rpkm(dge, log=TRUE)
Nrepl_data<-as.data.frame(Nrepl_data)
NormType<-"RPKM"
}
boxplot(Nrepl_data, las=2)
#Same problem as with cpm
#Filter low expression genes
keep<-rowSums(Nrepl_data>0)>=10 #as most lowly expressed genes are slightly above 0(=1), so we filter starting at 1 rep and more than 5 total in samples
Nrepl_data<-Nrepl_data[keep,]
#@@ Difference between 12 and 6 is important? -> it is we only do rpkm
boxplot(Nrepl_data, las=2)
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
#@@ More genes kept for similar normality plots than cpm (b73 tested)
## Plotting the normalized data counts <-allPLot Title
NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta)){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta)/6)) #creates a table that organizes the plots
png(paste0("./DistrPlots/", specie, "_norm", NormType, "_distPlot.png"), width=1600, height=800) #B73_normCPM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2,  top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
dev.off()
#@@ remove lowly expressed genes
#uses edgeR
dge <- DGEList(repl_data)
#Calculate normalization factors
dge <- calcNormFactors(dge)
#Get normalized counts
Nrepl_data <- cpm(dge, log=TRUE) #rpkm with lengths, testo other normalizations too
NormType<-"CPM.filter"
boxplot(Nrepl_data, las=2)
#We can see that most repetitions are from low-expressed counts, we should remove some
#Filter low expression genes
#keep<-rowSums(Nrepl_data>1)>=12 #as most lowly expressed genes are slightly above 0(=1), so we filter starting at 1 rep and more than 10 total in samples
keep<-(rowSums(Nrepl_data>1)>=12)|(apply(Nrepl_data, 1, max)>8) #total larger than 10 or 1 value larger than 5
Nrepl_data<-Nrepl_data[keep,]
boxplot(Nrepl_data, las=2)
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta)){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta)/6)) #creates a table that organizes the plots
png(paste0("./DistrPlots/", specie, "_norm", NormType, "_distPlot.png"), width=1600, height=800) #B73_normCPM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2, top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
dev.off()
if (exists("length_vec")){ #if we have lengths
length_vec<-data.frame(Length=length_vec) #convert to dataframe
dge <- DGEList(repl_data,genes=length_vec) #use edgeR for normalization
dge <- calcNormFactors(dge)
Nrepl_data <- rpkm(dge, log=TRUE)
Nrepl_data<-as.data.frame(Nrepl_data)
NormType<-"RPKM.filter"
Nrepl_data<-as.data.frame(Nrepl_data)
}
boxplot(Nrepl_data, las=2)
#Same problem as with cpm
#Filter low expression genes
keep<-(rowSums(Nrepl_data>0)>=10)|(apply(Nrepl_data, 1, max)>6) #total larger than 10 or 1 value larger than 5
#(apply(Nrepl_data, 1, max)>4) increases gray
Nrepl_data<-Nrepl_data[keep,]
#@@ Difference between 12 and 6 is important? -> it is we only do rpkm
boxplot(Nrepl_data, las=2)
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
## Plotting the normalized data counts
NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta)){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0(specie, " normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta)/6)) #creates a table that organizes the plots
png(paste0("./DistrPlots/", specie, "_norm", NormType, "_distPlot.png"), width=1600, height=800) #B73_normCPM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2,  top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
dev.off()
Nrepl_data<-t(Nrepl_data)
power <- c(c(1:15), seq(from = 17, to = 50, by = 2))
#power<-c(1:40)
#Network topology analysis
sft <- pickSoftThreshold(Nrepl_data,
powerVector = power,
networkType = "signed",
verbose = 5)
sftIn<-sft$fitIndices
p1<-ggplot(sftIn, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit\nsigned R^2') +
theme_classic()
p2<-ggplot(sftIn, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 1500) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(p1, p2, nrow=2)
print(sft$powerEstimate)
#Use automatic calculation
if (is.na(sft$powerEstimate)){
softPw<-30 #if the soft power is NA, set to 30, else take smallest possible
}else{
softPw <- min(sft$powerEstimate, 30)
}
if (specie=="DK105"){
softPw<-24 #4000
#softPw<-26 #6000
#softPw<-30 #8000
}
temp_cor <- cor
cor <- WGCNA::cor
ModNetwork <- blockwiseModules(Nrepl_data,
nThreads = 32, #16
maxBlockSize = 64000, #directly related to memory, if maxBlockSize<total genes, multiple blocks will have to be used -> worse clustering
deepSplit = 4,
TOMType = "signed", #unsigned?
power = softPw,
mergeCutHeight = 0.3,#0.3->4799#0.8->4799(low module granularity) #0.1->4799(high granularity(lots of colors))
minModuleSize = 20,
numericLabels = FALSE,
pamRespectsDendro = FALSE,
minKMEtoStay = 0.3,#0.3->4799 #0.8->7781 #<0.3 stays the same
randomSeed = 42,
verbose = 4)
cor<-temp_cor
#@@remove gray
module_eigengenes <- ModNetwork$MEs
#get number of genes for each module
table(ModNetwork$colors)
#B73
#cpm 1917/22205 pw:19
#rpkm 2068/24537 pw:19
#rpkm_filtered 1107/25296 pw:17
#DK105 pw:24 #@@recheck powers
#cpm 4364/22386
#rpkm 4823/25044
#rpkm_filtered 4799/25795
#EP1
#cpm 3167/22377 pw:21
#rpkm 2550/25139 pw:19
#rpkm_filtered 3456/25994 pw:21
#F7
#cpm 4329/22592 pw:25
#rpkm 3828/25214 pw:23
#rpkm_filtered 3770/25786 pw:23
#PE75
#cpm 2577/22127 pw:19
#rpkm 2758/24694 pw:19
#rpkm_filtered
print(softPw)
dim(Nrepl_data)
View(Nrepl_data)
module_eigengenes
blue_genes <- names(moduleColors)[moduleColors == "blue"]
blue_genes <- names(module_eigengenes)[module_eigengenes == "blue"]
ME
gene_modules <- ModNetwork$moduleColors
gene_modules
ModNetwork$colors
View(ModNetwork$colors)
gene_modules <- ModNetwork$colors  # Extracts module assignments
ModNetwork$moduleColors
blue_genes <- names(gene_modules)[gene_modules == "blue"]
View(Nrepl_data)
Nrepl_data<-as.data.frame(Nrepl_data)
# Subset only the genes in the "blue" module
blue_gene_expression <- Nrepl_data[, colnames(Nrepl_data) %in% blue_genes]
View(blue_gene_expression)
plot(blue_gene_expression)
View(blue_gene_expression)
plot(blue_gene_expression[,1])
plot(blue_gene_expression, type="l")
#rpkm 2758/24694 pw:19
?plot
plot(blue_gene_expression)
?plot
plot(blue_gene_expression[,1], type="l")
plot(blue_gene_expression[,1], type="l")
plot(blue_gene_expression[,1], type="l")+lines(blue_gene_expression[,2])
# Load required library
library(ggplot2)
library(reshape2)  # For data transformation
# Convert data to long format for ggplot
blue_gene_expression_long <- melt(blue_gene_expression)
colnames(blue_gene_expression_long) <- c("Sample", "Gene", "Expression")
blue_gene_expression_long
View(blue_gene_expression_long)
blue_gene_expression
?melt
gene_modules <- ModNetwork$colors
blue_genes <- names(gene_modules)[gene_modules == "blue"]
Nrepl_data<-as.data.frame(Nrepl_data)
blue_gene_expression <- Nrepl_data[, colnames(Nrepl_data) %in% blue_genes]
ggplot(blue_gene_expression, aes())
plot(blue_gene_expression[,1], type="l")+lines(blue_gene_expression[,2])
# Load required library
library(ggplot2)
library(reshape2)  # For data transformation
# Convert data to long format for ggplot
blue_gene_expression$sample<-rownames(blue_gene_expression)
blue_gene_expression_long <- melt(blue_gene_expression)
colnames(blue_gene_expression_long) <- c("Gene", "Expression")
# Create the line plot
ggplot(blue_gene_expression_long, aes(x = Sample, y = Expression, group = Gene, color = Gene)) +
geom_line(alpha = 0.7) +  # Plot lines for each gene
theme_minimal() +
labs(title = "Gene Expression in Blue Module",
x = "Sample",
y = "Expression Level",
color = "Gene") +
theme(legend.position = "none")  # Hide legend if too many genes
View(blue_gene_expression)
View(blue_gene_expression_long)
gene_modules <- ModNetwork$colors
blue_genes <- names(gene_modules)[gene_modules == "blue"]
Nrepl_data<-as.data.frame(Nrepl_data)
blue_gene_expression <- Nrepl_data[, colnames(Nrepl_data) %in% blue_genes]
ggplot(blue_gene_expression, aes())
plot(blue_gene_expression[,1], type="l")+lines(blue_gene_expression[,2])
# Load required library
library(ggplot2)
library(reshape2)  # For data transformation
# Convert data to long format for ggplot
blue_gene_expression$sample<-rownames(blue_gene_expression)
blue_gene_expression_long <- melt(blue_gene_expression)
colnames(blue_gene_expression_long) <- c("Sample", "Gene", "Expression")
# Create the line plot
ggplot(blue_gene_expression_long, aes(x = Sample, y = Expression, group = Gene, color = Gene)) +
geom_line(alpha = 0.7) +  # Plot lines for each gene
theme_minimal() +
labs(title = "Gene Expression in Blue Module",
x = "Sample",
y = "Expression Level",
color = "Gene") +
theme(legend.position = "none")  # Hide legend if too many genes
View(blue_gene_expression)
gene_modules <- ModNetwork$colors
blue_genes <- names(gene_modules)[gene_modules == "lightcyan"]
Nrepl_data<-as.data.frame(Nrepl_data)
blue_gene_expression <- Nrepl_data[, colnames(Nrepl_data) %in% blue_genes]
ggplot(blue_gene_expression, aes())
plot(blue_gene_expression[,1], type="l")+lines(blue_gene_expression[,2])
# Load required library
library(ggplot2)
library(reshape2)  # For data transformation
# Convert data to long format for ggplot
blue_gene_expression$sample<-rownames(blue_gene_expression)
blue_gene_expression_long <- melt(blue_gene_expression)
colnames(blue_gene_expression_long) <- c("Sample", "Gene", "Expression")
# Create the line plot
ggplot(blue_gene_expression_long, aes(x = Sample, y = Expression, group = Gene, color = Gene)) +
geom_line(alpha = 0.7) +  # Plot lines for each gene
theme_minimal() +
labs(title = "Gene Expression in Blue Module",
x = "Sample",
y = "Expression Level",
color = "Gene") +
theme(legend.position = "none")  # Hide legend if too many genes
View(blue_gene_expression)
View(blue_gene_expression_long)
specie
