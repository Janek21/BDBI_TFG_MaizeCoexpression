scale_size(range = c(0, 5), trans="reverse")+
scale_color_continuous(trans="reverse")+
labs(size="P-value", color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))+
guides(color=guide_legend(order=1),
size=guide_legend(order=1))
#highlight significant values(all equal)
hplot<-bareplot+
geom_point(data=subset(pvdata, TopSig), aes(fill=TopSig), color="darkorange", size=7)+
labs(fill="")+scale_fill_hue(labels=c("Highly\nsignificant"))+
guides(fill=guide_legend(order=2))+
theme(legend.text=element_text(size=14))
svg(paste0("./annotation/SigPlots/sig_", dChoice, ".svg"), width=1600/60, height=800/60)
hplot+ggtitle(dChoice)
dev.off()
#ggplotly(hplot)
#Set up table for significant functions in each module, remove unneeded data
TopSig<-as.data.frame(subset(pvdata, TopSig))
TopSig$TotalCounts<-TopSig$ModuleCounts<-TopSig$Relevancy<-TopSig$TopSig<-NULL
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
svg(paste0("./annotation/SigPlots/top/top_", dChoice, ".svg"), width=1600/60, height=800/60)
TopPlot+ggtitle(dChoice)
dev.off()
#write top significant to table
write.table(TopSig, paste0("./annotation/SigPlots/top/top_", dChoice, ".txt"), sep='\t', row.names=FALSE)
#Plots significance per function in each module, highlights most significant in total and writes them in a table
#Step 3
library(ggplot2)
library(plotly)
library(ggnewscale)
#read data
dChoice<-"anT_mercator"
dChoice<-"d_2"
pvdata<-read.table(paste0("./annotation/Pres/", dChoice, "_sheet.txt"), sep='\t', header=TRUE)
#Choose relevant
pvdata$Relevancy<-as.logical(pvdata$Relevancy)
pvdata<-pvdata[pvdata$Relevancy,]
#Get top x significant values
highSig<-sort(pvdata$Pvalue)[1:10]
pvdata$TopSig<-pvdata$Pvalue %in% highSig
#plot all values
bareplot<-ggplot(pvdata, aes(x=Function, y=Module))+
geom_point(aes(size=Pvalue, color=Pvalue))+
scale_size(range = c(0, 5), trans="reverse")+
scale_color_continuous(trans="reverse")+
labs(size="P-value", color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))+
guides(color=guide_legend(order=1),
size=guide_legend(order=1))
#highlight significant values(all equal)
hplot<-bareplot+
geom_point(data=subset(pvdata, TopSig), aes(fill=TopSig), color="darkorange", size=7)+
labs(fill="")+scale_fill_hue(labels=c("Highly\nsignificant"))+
guides(fill=guide_legend(order=2))+
theme(legend.text=element_text(size=14))
svg(paste0("./annotation/SigPlots/sig_", dChoice, ".svg"), width=1600/60, height=800/60)
hplot+ggtitle(dChoice)
dev.off()
#ggplotly(hplot)
#Set up table for significant functions in each module, remove unneeded data
TopSig<-as.data.frame(subset(pvdata, TopSig))
TopSig$TotalCounts<-TopSig$ModuleCounts<-TopSig$Relevancy<-TopSig$TopSig<-NULL
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
svg(paste0("./annotation/SigPlots/top/top_", dChoice, ".svg"), width=1600/60, height=800/60)
TopPlot+ggtitle(dChoice)
dev.off()
#write top significant to table
write.table(TopSig, paste0("./annotation/SigPlots/top/top_", dChoice, ".txt"), sep='\t', row.names=FALSE)
#Plots significance per function in each module, highlights most significant in total and writes them in a table
#Step 3
library(ggplot2)
library(plotly)
library(ggnewscale)
#read data
dChoice<-"anT_mercator"
dChoice<-"d_1"
pvdata<-read.table(paste0("./annotation/Pres/", dChoice, "_sheet.txt"), sep='\t', header=TRUE)
#Choose relevant
pvdata$Relevancy<-as.logical(pvdata$Relevancy)
pvdata<-pvdata[pvdata$Relevancy,]
#Get top x significant values
highSig<-sort(pvdata$Pvalue)[1:10]
pvdata$TopSig<-pvdata$Pvalue %in% highSig
#plot all values
bareplot<-ggplot(pvdata, aes(x=Function, y=Module))+
geom_point(aes(size=Pvalue, color=Pvalue))+
scale_size(range = c(0, 5), trans="reverse")+
scale_color_continuous(trans="reverse")+
labs(size="P-value", color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))+
guides(color=guide_legend(order=1),
size=guide_legend(order=1))
#highlight significant values(all equal)
hplot<-bareplot+
geom_point(data=subset(pvdata, TopSig), aes(fill=TopSig), color="darkorange", size=7)+
labs(fill="")+scale_fill_hue(labels=c("Highly\nsignificant"))+
guides(fill=guide_legend(order=2))+
theme(legend.text=element_text(size=14))
svg(paste0("./annotation/SigPlots/sig_", dChoice, ".svg"), width=1600/60, height=800/60)
hplot+ggtitle(dChoice)
dev.off()
#ggplotly(hplot)
#Set up table for significant functions in each module, remove unneeded data
TopSig<-as.data.frame(subset(pvdata, TopSig))
TopSig$TotalCounts<-TopSig$ModuleCounts<-TopSig$Relevancy<-TopSig$TopSig<-NULL
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
svg(paste0("./annotation/SigPlots/top/top_", dChoice, ".svg"), width=1600/60, height=800/60)
TopPlot+ggtitle(dChoice)
dev.off()
#write top significant to table
write.table(TopSig, paste0("./annotation/SigPlots/top/top_", dChoice, ".txt"), sep='\t', row.names=FALSE)
dChoice<-"d_1"
pvdata<-read.table(paste0("./annotation/Pres/", dChoice, "_sheet.txt"), sep='\t', header=TRUE)
#Choose relevant
pvdata$Relevancy<-as.logical(pvdata$Relevancy)
pvdata<-pvdata[pvdata$Relevancy,]
#Get top x significant values
highSig<-sort(pvdata$Pvalue)[1:20]
pvdata$TopSig<-pvdata$Pvalue %in% highSig
library(ggplot2)
library(plotly)
library(ggnewscale)
#plot all values
bareplot<-ggplot(pvdata, aes(x=Function, y=Module))+
geom_point(aes(size=Pvalue, color=Pvalue))+
scale_size(range = c(0, 5), trans="reverse")+
scale_color_continuous(trans="reverse")+
labs(size="P-value", color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))+
guides(color=guide_legend(order=1),
size=guide_legend(order=1))
#highlight significant values(all equal)
hplot<-bareplot+
geom_point(data=subset(pvdata, TopSig), aes(fill=TopSig), color="darkorange", size=7)+
labs(fill="")+scale_fill_hue(labels=c("Highly\nsignificant"))+
guides(fill=guide_legend(order=2))+
theme(legend.text=element_text(size=14))
hplot+ggtitle(dChoice)
#Set up table for significant functions in each module, remove unneeded data
TopSig<-as.data.frame(subset(pvdata, TopSig))
TopSig$TotalCounts<-TopSig$ModuleCounts<-TopSig$Relevancy<-TopSig$TopSig<-NULL
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
TopPlot+ggtitle(dChoice)
genemodule<-read.delim(moduledata)
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=T, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.delim(moduledata)
View(genemodule)
genemodule<-read.delim(moduledata, sep=" ")
View(genemodule)
genemodule<-read.table(moduledata, sep=" ")
View(genemodule)
genemodule<-read.table(moduledata)
View(genemodule)
genemodule$genes<-rownames(genemodule)
View(genemodule)
genemodule$modules==ME
ME<-"blue"
genemodule$modules==ME
genemodule<-genemodule[genemodule$modules==ME]
genemodule<-genemodule[,genemodule$modules==ME]
genemodule<-genemodule[genemodule$modules==ME,]
View(genemodule)
dataPath<-paste0("../data/wlen/data_wlen.csv")
metadataPath<-paste0("../data/metadata.txt")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=T, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
View(dataNL)
View(metadata)
View(genemodule)
View(dataNL)
dataPath<-paste0("../data/wlen/data_wlen.csv")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule<-genemodule[genemodule$modules==ME,]
genemodule[genemodule$modules==ME,]
genemodule[genemodule$modules==ME,]
dataPath<-paste0("../data/wlen/data_wlen.csv")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule$modules
View(genemodule)
genemodule$modules==ME
genemodule[genemodule$modules==ME,]
rownames(genemodule[genemodule$modules==ME,])
genemodule<-rownames(genemodule[genemodule$modules==ME,])
dataPath<-paste0("../data/wlen/data_wlen.csv")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule<-rownames(genemodule[genemodule$modules==ME,])
dataPath<-paste0("../data/wlen/data_wlen.csv")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule<-genemodule[genemodule$modules==ME,]
dataPath<-paste0("../data/wlen/data_wlen.csv")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule$genes<-rownames(genemodule)
genemodule<-genemodule[genemodule$modules==ME,]
View(genemodule)
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule<-genemodule[genemodule$modules==ME,]
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule<-as.data.frame(genemodule[genemodule$modules==ME,])
View(genemodule)
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule$genes<-rownames(genemodule)
genemodule<-as.data.frame(genemodule[genemodule$modules==ME,])
genemodule<-read.table(moduledata)
ME<-"blue"
genemodule$genes<-rownames(genemodule)
MEgenes<-rownames(genemodule[genemodule$modules==ME,])
MEgeneList<-rownames(genemodule[genemodule$modules==ME,])
dataNL[MEgeneList]
dataNL[MEgeneList,]
geneInfo<-dataNL[MEgeneList,]
View(geneInfo)
library(edgeR)
geneInfo$Length
library(edgeR)
dataPath<-paste0("../data/wlen/data_wlen.csv")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
#Data selection
ME<-"blue"
genemodule$genes<-rownames(genemodule)
MEgeneList<-rownames(genemodule[genemodule$modules==ME,])
geneInfo<-dataNL[MEgeneList,]
if ("Length" %in% colnames(geneInfo)){
length_vec<-geneInfo$Length
}
length_vec<-data.frame(Length=length_vec) #convert to dataframe
dge <- DGEList(geneInfo,genes=length_vec) #use edgeR for normalization
dge <- calcNormFactors(dge)
Nrepl_data <- rpkm(dge, log=TRUE)
Nrepl_data<-as.data.frame(Nrepl_data)
library(edgeR)
dataPath<-paste0("../data/wlen/data_wlen.csv")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
#Data selection
ME<-"blue"
genemodule$genes<-rownames(genemodule)
MEgeneList<-rownames(genemodule[genemodule$modules==ME,])
geneInfo<-dataNL[MEgeneList,]
#len vector
if ("Length" %in% colnames(geneInfo)){
length_vec<-geneInfo$Length
}
##Join samples by replicate?
#Normalization
length_vec<-data.frame(Length=length_vec) #convert to dataframe
dge <- DGEList(geneInfo,genes=length_vec) #use edgeR for normalization
dge <- calcNormFactors(dge)
Nrepl_data <- rpkm(dge, log=TRUE)
Nrepl_data<-as.data.frame(Nrepl_data)
#filter data
keep<-apply(Nrepl_data, 1, max)>=0 #keep genes where the counts for at least one replicate are of at least 1 (0 because of log)
Nrepl_data<-Nrepl_data[keep,]
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
#nw parameters
Nrepl_data<-t(Nrepl_data)
power <- c(c(1:15), seq(from = 17, to = 50, by = 2)) #more detailed in lower values
#Network topology analysis
sft <- pickSoftThreshold(Nrepl_data,
powerVector = power,
networkType = "signed",
verbose = 5)
library(edgeR)
library(WGCNA)
dataPath<-paste0("../data/wlen/data_wlen.csv")
moduledata<-"./geneModule.txt"
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
genemodule<-read.table(moduledata)
#Data selection
ME<-"blue"
genemodule$genes<-rownames(genemodule)
MEgeneList<-rownames(genemodule[genemodule$modules==ME,])
geneInfo<-dataNL[MEgeneList,]
#len vector
if ("Length" %in% colnames(geneInfo)){
length_vec<-geneInfo$Length
}
##Join samples by replicate?
#Normalization
length_vec<-data.frame(Length=length_vec) #convert to dataframe
dge <- DGEList(geneInfo,genes=length_vec) #use edgeR for normalization
dge <- calcNormFactors(dge)
Nrepl_data <- rpkm(dge, log=TRUE)
Nrepl_data<-as.data.frame(Nrepl_data)
#filter data
keep<-apply(Nrepl_data, 1, max)>=0 #keep genes where the counts for at least one replicate are of at least 1 (0 because of log)
Nrepl_data<-Nrepl_data[keep,]
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
#nw parameters
Nrepl_data<-t(Nrepl_data)
power <- c(c(1:15), seq(from = 17, to = 50, by = 2)) #more detailed in lower values
#Network topology analysis
sft <- pickSoftThreshold(Nrepl_data,
powerVector = power,
networkType = "signed",
verbose = 5)
softPw <- min(sft$powerEstimate, 30)
#block build
temp_cor<-cor
cor<-WGCNA::cor
ModNetwork<-blockwiseModules(Nrepl_data,
nThreads = 32, #16
maxBlockSize = 64000, #directly related to memory, if maxBlockSize<total genes, multiple blocks will have to be used -> worse clustering
deepSplit = 4,
TOMType = "unsigned", #unsigned?
power = softPw,
mergeCutHeight = 0.3,#0.3->4799#0.8->4799(low module granularity) #0.1->4799(high granularity(lots of colors))
minModuleSize = 20,
numericLabels = FALSE,
pamRespectsDendro = FALSE,
minKMEtoStay = 0.3,#0.3->4799 #0.8->7781 #<0.3 stays the same
randomSeed = 42,
verbose = 4)
sft$powerEstimate
softPw <- min(sft$powerEstimate, 30)
min(sft$powerEstimate, 30)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, fig.width=16, fig.height=8)
knitr::opts_chunk$set(purl = TRUE)
sftIn<-sft$fitIndices
p1<-ggplot(sftIn, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit\nsigned R^2') +
theme_classic()
library(ggplot2)
sftIn<-sft$fitIndices
p1<-ggplot(sftIn, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit\nsigned R^2') +
theme_classic()
p2<-ggplot(sftIn, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 1500) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(p1, p2, nrow=2)
p1
p2
p1
power <- c(c(1:50)) #more detailed in lower values
#Network topology analysis
sft <- pickSoftThreshold(Nrepl_data,
powerVector = power,
networkType = "signed",
verbose = 5)
sftIn<-sft$fitIndices
p1<-ggplot(sftIn, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit\nsigned R^2') +
theme_classic()
p1
sft$powerEstimate
softPw<-30
#block build
temp_cor<-cor
cor<-WGCNA::cor
ModNetwork<-blockwiseModules(Nrepl_data,
nThreads = 32, #16
maxBlockSize = 64000, #directly related to memory, if maxBlockSize<total genes, multiple blocks will have to be used -> worse clustering
deepSplit = 4,
TOMType = "unsigned", #unsigned?
power = softPw,
mergeCutHeight = 0.3,#0.3->4799#0.8->4799(low module granularity) #0.1->4799(high granularity(lots of colors))
minModuleSize = 20,
numericLabels = FALSE,
pamRespectsDendro = FALSE,
minKMEtoStay = 0.3,#0.3->4799 #0.8->7781 #<0.3 stays the same
randomSeed = 42,
verbose = 4)
cor<-temp_cor
module_eigengenes<-ModNetwork$MEs
#get number of genes for each module
table(ModNetwork$colors)
dim(Nrepl_data) #get total number of genes from the dimensions
MEg_data<-data.frame(ModNetwork$colors)
colnames(MEg_data)<-"modules"
#write.table(MEg_data, file="geneModule.txt")
#Plot the module colors before and after merging underneath
plotDendroAndColors(ModNetwork$dendrograms[[1]], cbind(ModNetwork$unmergedColors, ModNetwork$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03, #@@ review params
guideHang = 0.05)
View(ModNetwork)
