library(dplyr)
library(gridExtra)
dataNL<-read.delim("../data/B73.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/B73_m.txt", header=T, row.names=1, stringsAsFactors=TRUE)
dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/metadata_3.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
levels(metadata$location)
table(metadata$location)
View(jointData)
View(metadata)
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(DESeq2)
library(tidyverse)
library(dplyr)
library(gridExtra)
dataNL<-read.delim("../data/B73.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/B73_m.txt", header=T, row.names=1, stringsAsFactors=TRUE)
dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/metadata_3.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns thet belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
return(as.data.frame(data))
}
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(DESeq2)
library(tidyverse)
library(dplyr)
library(gridExtra)
dataNL<-read.delim("../data/B73.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/B73_m.txt", header=T, row.names=1, stringsAsFactors=TRUE)
#dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
#metadata<-read.delim("../data/metadata_3.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns thet belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
return(as.data.frame(data))
}
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(DESeq2)
library(tidyverse)
library(dplyr)
library(gridExtra)
dataNL<-read.delim("../data/B73.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/B73_m.txt", header=T, row.names=1, stringsAsFactors=TRUE)
#dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
#metadata<-read.delim("../data/metadata_3.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns thet belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
return(as.data.frame(data))
}
tissue_data<-levels(metadata$location) #get list of tissue names
d_joint<-sapply(tissue_data, function(tissue_name) rsumer(dataNL, metadata, tissue_name)) #returns an array where each entry is a column with the mean data of the replicates (rows are genes)
repl_data<-as.data.frame(d_joint)
colnames(repl_data) = gsub(pattern = "*.data", replacement = "", x = colnames(repl_data))
View(repl_data)
rownames(repl_data)<-rownames(dataNL)
View(repl_data)
all(rownames(repl_data) == rownames(dataNL))
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns thet belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
return(as.data.frame(data))
}
tissue_data<-levels(metadata$location) #get list of tissue names
d_joint<-sapply(tissue_data, function(tissue_name) rsumer(dataNL, metadata, tissue_name)) #returns an array where each entry is a column with the mean data of the replicates (rows are genes)
repl_data<-as.data.frame(d_joint)
colnames(repl_data) = gsub(pattern = "*.data", replacement = "", x = colnames(repl_data))
nrow(repl_data)==nrow(dataNL)
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(DESeq2)
library(tidyverse)
library(dplyr)
library(gridExtra)
dataNL<-read.delim("../data/B73.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/B73_m.txt", header=T, row.names=1, stringsAsFactors=TRUE)
#dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
#metadata<-read.delim("../data/metadata_3.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns thet belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
return(as.data.frame(data))
}
tissue_data<-levels(metadata$location) #get list of tissue names
d_joint<-sapply(tissue_data, function(tissue_name) rsumer(dataNL, metadata, tissue_name)) #returns an array where each entry is a column with the mean data of the replicates (rows are genes)
repl_data<-as.data.frame(d_joint)
colnames(repl_data) = gsub(pattern = "*.data", replacement = "", x = colnames(repl_data))
outDetect<-goodSamplesGenes(t(repl_data))
summary(outDetect)
outDetect$allOK
knitr::opts_chunk$set(echo = TRUE)
table(outDetect$goodGenes)
table(outDetect$goodSamples)
outDetect$goodSamples
outDetect<-goodSamplesGenes(t(dataNL))
summary(outDetect)
outDetect$allOK
outDetect$allOK
table(outDetect$goodGenes)
table(outDetect$goodSamples)
summary(outDetect)
outDetect<-goodSamplesGenes(t(dataNL))
table(outDetect$goodGenes)
table(outDetect$goodSamples)
dataNL<-dataNL[outDetect$goodGenes==TRUE,] #remove ouliers
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(DESeq2)
library(tidyverse)
library(dplyr)
library(gridExtra)
dataNL<-read.delim("../data/B73.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/B73_m.txt", header=T, row.names=1, stringsAsFactors=TRUE)
#dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
#metadata<-read.delim("../data/metadata_3.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
htree<-hclust(dist(t(dataNL)), method = "average")
plot(htree)
dataNL<-dataNL[outDetect$goodGenes==TRUE,]
dim(dataNL)
htree<-hclust(dist(t(dataNL)), method = "average")
plot(htree)
knitr::opts_chunk$set(echo = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(DESeq2)
library(tidyverse)
library(dplyr)
library(gridExtra)
dataNL<-read.delim("../data/B73.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/B73_m.txt", header=T, row.names=1, stringsAsFactors=TRUE)
#dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
#metadata<-read.delim("../data/metadata_3.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
htree<-hclust(dist(t(dataNL)), method = "average")
plot(htree)
outDetect<-goodSamplesGenes(t(dataNL))
table(outDetect$goodGenes) #False genes are outliers
table(outDetect$goodSamples) #All samples are True = no outliers
dataNL<-dataNL[outDetect$goodGenes==TRUE,] #remove ouliers
htree<-hclust(dist(t(dataNL)), method = "average")
plot(htree)
htree<-hclust(dist(dataNL), method = "average")
plot(htree)
outDetect<-goodSamplesGenes(t(dataNL))
table(outDetect$goodGenes) #False genes are outliers
table(outDetect$goodSamples) #All samples are True = no outliers
dataNL<-dataNL[outDetect$goodGenes==TRUE,] #remove ouliers
htree<-hclust(dist(dataNL), method = "average")
plot(htree)
pca<-prcomp(t(dataNL))
ggplot(pca$x, aes(PC1, PC2, color=metadata$rep))+
geom_point()+geom_text(label=rownames(pca$x))+
labs(x=paste0("PC1:", round(pca_var/sum(pca_var)*100, digits=2)[1], "%"),
x=paste0("PC2:", round(pca_var/sum(pca_var)*100, digits=2)[2], "%"))
?repl_data
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = repl_data,
#colData = metadata,
design = ~ 1)
dds <- DESeqDataSetFromMatrix(countData = repl_data,
colData = colnames(repl_data),
design = ~ 1)
colnames(repl_data)
dds <- DESeqDataSetFromMatrix(countData = repl_data,
colData = t(repl_data),
design = ~ 1)
View(t(repl_data))
repl_meta<-as.data.frame(colnames(repl_data))
View(repl_meta)
repl_meta<-as.data.frame(location=colnames(repl_data))
?as.data.frame
repl_meta<-as.data.frame(colnames(repl_data), col.names=c("location"))
repl_meta<-as.data.frame(colnames(repl_data), col.names=c("location"))
View(repl_meta)
repl_meta<-as.data.frame(colnames(repl_data), col.names="location")
View(repl_meta)
repl_meta<-as.data.frame(colnames(repl_data), colnames("location"))
View(repl_meta)
repl_meta<-as.data.frame(colnames(repl_data))
View(repl_data)
View(repl_meta)
dds <- DESeqDataSetFromMatrix(countData = repl_data,
colData = repl_meta,
design = ~ 1)
repl_data<-lapply(as.numeric, repl_data)
repl_data<-sapply(as.numeric, repl_data)
repl_data<-lapply(repl_data, as.numeric)
dds <- DESeqDataSetFromMatrix(countData = repl_data,
colData = repl_meta,
design = ~ 1)
View(repl_data)
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns that belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
return(as.data.frame(data))
}
tissue_data<-levels(metadata$location) #get list of tissue names
d_joint<-sapply(tissue_data, function(tissue_name) rsumer(dataNL, metadata, tissue_name)) #returns an array where each entry is a column with the mean data of the replicates (rows are genes)
repl_data<-as.data.frame(d_joint) #data joint by replicate
colnames(repl_data) = gsub(pattern = "*.data", replacement = "", x = colnames(repl_data)) #get column names to be only location
rownames(repl_data)<-rownames(dataNL) #rename rows to be genes again
repl_meta<-as.data.frame(colnames(repl_data))
repl_data[] <- lapply(repl_data, as.numeric)
View(repl_data)
dds <- DESeqDataSetFromMatrix(countData = repl_data,
colData = repl_meta,
design = ~ 1)
which(is.na(as.numeric(as.character(repl_data[[1]]))))
repl_data[] <- lapply(repl_data, as.numeric)
dds <- DESeqDataSetFromMatrix(countData = round(repl_data),
colData = repl_meta,
design = ~ 1)
View(repl_data)
View(log10(repl_data))
View(log(repl_data))
View((repl_data)^10)
View(repl_data)
View(repl_data*10^2)
View(repl_data*10)
repl_meta<-as.data.frame(colnames(repl_data))
# repl_data[] <- lapply(repl_data, as.numeric)
dds <- DESeqDataSetFromMatrix(countData = round(repl_data),
colData = repl_meta,
design = ~ 1)
#optional(recommended): remove <15 counts
dds75 <- dds[rowSums(counts(dds) >= 15) >= 24,]
nrow(dds75) # 35794 genes
# perform variance stabilization
N_dataNL<-assay(vst(dds75))
N_dataNL<-t(N_dataNL)
nrow(dds75) # 35794 genes
repl_meta<-as.data.frame(colnames(repl_data))
dds <- DESeqDataSetFromMatrix(countData = round(repl_data),
colData = repl_meta,
design = ~ 1)
#@@
#(recommended): remove <15 counts
dds75 <- dds[rowSums(counts(dds) >= 15) >= 24,]
nrow(dds75)
dds75<-dds
# perform variance stabilization
N_dataNL<-assay(vst(dds75))
N_dataNL<-t(N_dataNL)
View(N_dataNL)
vst(dds75)
?vst
library(edgeR)
# Create a DGEList object
dge <- DGEList(repl_data)
# Calculate normalization factors
dge <- calcNormFactors(dge, method = "TMM")
# Get normalized counts
normalized_counts <- cpm(dge)
View(normalized_counts)
lib_sizes <- colSums(repl_data)
# Calculate CPM
cpm <- t(t(counts) / lib_sizes) * 1e6
# Calculate CPM
cpm <- t(t(repl_data) / lib_sizes) * 1e6
View(cpm)
# Get normalized counts
Nrepl_data <- cpm(dge)
lib_sizes <- colSums(repl_data)
