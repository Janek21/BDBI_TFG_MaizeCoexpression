View(b73.mercator.v4.7)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, fig.width=16, fig.height=8)
knitr::opts_chunk$set(purl = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(randomcoloR)
library(edgeR)
library(tidyverse)
library(dplyr)
library(grid)
library(gridExtra)
#devtools::install_github("kevinblighe/CorLevelPlot")
library(CorLevelPlot)
library(ggpubr)
library(plotly)
library(factoextra)
library(umap)
library(heatmaply)
dataPath<-paste0("../data/wlen/data_wlen.csv")
metadataPath<-paste0("../data/metadata.txt")
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
if ("Length" %in% colnames(dataNL)){
length_vec<-dataNL$Length
}
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abbreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different total amounts of each tissue replicate would indicate that one of the species does not present the same amount copies
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of existing replicates)
outDetect<-goodSamplesGenes(t(dataNL))
table(outDetect$goodGenes) #False genes are outliers
table(outDetect$goodSamples) #All samples are True = no outliers
dataNL<-dataNL[outDetect$goodGenes==TRUE,] #remove ouliers
if (exists("length_vec")){ #only if it exists
length_vec<-length_vec[outDetect$goodGenes==TRUE] #if length_vec exists remove outliers from there as well
}
#add the name of the species to the replicate, to be able to differentiate it
#save location
metadata$org_location<-as.factor(metadata$location)
#create specialized location
metadata$location<-paste(metadata$specie, metadata$location, sep="_")
metadata$location<-as.factor(metadata$location)
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns that belong to a location (ex: mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of location only, based on metadata
if (1<ncol(data.frame(data))){ #If there's only 1 replicate, don't try to do the mean (it gives error)
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
}
return(as.data.frame(data))
}
tissue_data<-levels(metadata$location) #get list of tissue names
d_joint<-sapply(tissue_data, function(tissue_name) rsumer(dataNL, metadata, tissue_name)) #returns an array where each entry is a column with the mean data of the replicates (rows are genes)
repl_data<-as.data.frame(d_joint) #data joint by replicate
colnames(repl_data) = gsub(pattern = "*.data", replacement = "", x = tolower(colnames(repl_data))) #get column names to be only location
rownames(repl_data)<-rownames(dataNL) #rename rows to be genes again
#Create a column for the location+species
repl_meta<-as.data.frame(colnames(repl_data))
colnames(repl_meta)<-c("location")
#Split the created column and add 2 columns to repl_meta, one for the species and one for the tissue
temp_meta<-data.frame(t(data.frame(strsplit(as.character(repl_meta$location), "_"))))
repl_meta<-data.frame(repl_meta$location, temp_meta$X1, temp_meta$X2)
colnames(repl_meta)<-c("location", "species", "org_location")
multiColHist<-function(data, location, color_var){ #gets the data table, the concrete column(tissue) and the color for the tissue
loc_var<-data[[location]] #get the tissue data
p<-ggplot(data, aes(x=loc_var))+
geom_histogram(bins = 30, fill=color_var, color="black")+
xlab("")+ylab("")+theme_minimal() #plot a colored histogram for all genes of X tissue
return(p)
}
#Create a vector to select 2 examples of each line
repl_selection<-seq(1,ncol(repl_data), by=round(ncol(repl_data)/10))
colorList<-distinctColorPalette(length(repl_selection)) #make a list with a color for each tissue
#Create a legend that realates each color to a tissue
#use the repl_meta dataframe for creating the plot, as it contains all tissue(location) names
legend_plot<-ggplot(repl_meta[repl_selection,], aes(x=1, y=location, color=location))+
geom_point()+
scale_color_manual(values=colorList)+
guides(color=guide_legend(ncol=1))+
theme_void()+labs(color="Tissue")+
theme(legend.title=element_text(size=18),
legend.text=element_text(size=15)) #plot used only to get the legend that associates colors with localizations(tissues)
legend_var<-get_legend(legend_plot) #place the legend into a variable
RawHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta[repl_selection,])){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(repl_data, loc, color_var)
RawHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0("Raw data distribution")
raw_Ptab<-arrangeGrob(grobs=RawHistList, ncol=ceiling(nrow(repl_meta[repl_selection,])/6)) #creates a table that organizes the plots
#png("./DistrPlots/Raw_distPlot.png", width=1600, height=800) #Raw_distPlot.png
grid.arrange(raw_Ptab, legend_var, widths = c(10, 2.3), ncol=2, top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
#dev.off()
#edgeR object
dge<-DGEList(repl_data)
#Calculate normalization factors
dge<-calcNormFactors(dge)
#Get normalized counts
Nrepl_data<-cpm(dge, log=TRUE)
NormType<-"CPM"
#Filter low expression genes
keep<-apply(Nrepl_data, 1, max)>=0 #keep genes where the counts for at least one replicate are of at least 1 (0 because of log)
Nrepl_data<-Nrepl_data[keep,]
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #eventually transpose
NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta[repl_selection,])){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0("Normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta[repl_selection,])/6)) #creates a table that organizes the plots
#png(paste0("./DistrPlots/norm", NormType, "_distPlot.png"), width=1600, height=800) #normCPM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2, top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
#dev.off()
if (exists("length_vec")){ #if we have lengths
length_vec<-data.frame(Length=length_vec) #convert to dataframe
dge <- DGEList(repl_data,genes=length_vec) #use edgeR for normalization
dge <- calcNormFactors(dge)
Nrepl_data <- rpkm(dge, log=TRUE)
Nrepl_data<-as.data.frame(Nrepl_data)
NormType<-"RPKM"
}
#Filter low expression genes
keep<-apply(Nrepl_data, 1, max)>=0 #keep genes where the counts for at least one replicate are of at least 1 (0 because of log)
Nrepl_data<-Nrepl_data[keep,]
#Nrepl to data frame
Nrepl_data<-as.data.frame(Nrepl_data) #evetually transpose
#More genes kept after normalization and filtering than cpm
NormHistList<-list() #to store the plots
for (i in 1:nrow(repl_meta[repl_selection,])){
color_var<-colorList[i]
loc<-colnames(repl_data)[i]
temp_plot<-multiColHist(Nrepl_data, loc, color_var)
NormHistList[[i]]<-temp_plot
} #iterates over each tissue, creates a plot with a distinct color for it and stores it in a list
plotTitle<-paste0("Normalized data distribution using ", NormType)
norm_Ptab<-arrangeGrob(grobs=NormHistList, ncol=ceiling(nrow(repl_meta[repl_selection,])/6)) #creates a table that organizes the plots
#png(paste0("./DistrPlots/norm", NormType, "_distPlot.png"), width=1600, height=800) #normRPKM_distPlot
grid.arrange(norm_Ptab, legend_var, widths = c(10, 2.3), ncol=2,  top=textGrob(plotTitle, gp=gpar(fontsize=20))) #plots the plot list and legend together
#dev.off()
#set genes as columns and replicates by species as rows
repl_dvData<-as.data.frame(t(repl_data))
Nrepl_dvData<-as.data.frame(t(Nrepl_data))
set.seed(42)
#Normalized
Nrepl_dvData_sc<-scale(Nrepl_dvData)
N_pca<-prcomp(Nrepl_dvData_sc, scale=T)
#Normalized
ggplot(N_pca$x, aes(x=PC1, y=PC2, color=repl_meta$org_location, shape=repl_meta$species))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
#scale_size_manual(values = c(2, 6))+
#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal()
#Tissue clusters
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE, pointshape = 19,
title="Tissue-based classification")
dataPlotter<-function(umap_data, metadata){
plt<-ggplot(as.data.frame(umap_data$layout), aes(x=umap_data$layout[,1], y=umap_data$layout[,2], shape=metadata$species, color=metadata$org_location))+
geom_point(size=6)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
labs(x="x", y="y", shape="Species", color="Tissue")+
theme_minimal()
return(plt)
}
sc_Numap_data<-umap(Nrepl_dvData_sc)
ggplotly(dataPlotter(sc_Numap_data, repl_meta)+ggtitle("Normalized-scaled data Umap"))
ggplotly(ggplot(as.data.frame(sc_Numap_data$layout), aes(x=sc_Numap_data$layout[,1], y=sc_Numap_data$layout[,2], color=repl_meta$org_location))+
geom_point(size=5)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
theme_minimal()+ggtitle("Tissue-based"))
ggplot(as.data.frame(sc_Numap_data$layout), aes(x=sc_Numap_data$layout[,1], y=sc_Numap_data$layout[,2], color=repl_meta$species))+
geom_point(size=5)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
theme_minimal()+ggtitle("Species-based")
FinalUmap<-umap(Nrepl_dvData_sc, n_neighbors=29, n_epochs=450, min_dist=0.1) #nneighbor:22, 29, 35
ggplotly(dataPlotter(FinalUmap, repl_meta)+ggtitle("Final UMAP with cleaned data"))
#Convert to matrix
expression_matrix<-as.matrix(Nrepl_data)
sample_correlations<-cor(expression_matrix)
heatmaply(sample_correlations, clustering_method = "complete",
colors = blueWhiteRed(256),
#grid_color = "black",
grid_gap = 0.001)
#@@ modify all powers choose chapter
#https://github.com/kpatel427/YouTubeTutorials/blob/main/WGCNA.R
Nrepl_data<-t(Nrepl_data)
power <- c(c(1:15), seq(from = 17, to = 50, by = 2)) #more detailed in lower values
#Network topology analysis
sft <- pickSoftThreshold(Nrepl_data,
powerVector = power,
networkType = "signed",
verbose = 5)
sftIn<-sft$fitIndices
p1<-ggplot(sftIn, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit\nsigned R^2') +
theme_classic()
p2<-ggplot(sftIn, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 1500) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(p1, p2, nrow=2)
print(sft$powerEstimate)
#Use automatic calculation
if (is.na(sft$powerEstimate)){
softPw<-30 #if the soft power is NA, set to 30, else take smallest possible
}else{
softPw <- min(sft$powerEstimate, 30)
}
temp_cor<-cor
cor<-WGCNA::cor
ModNetwork<-blockwiseModules(Nrepl_data,
nThreads = 32, #16
maxBlockSize = 64000, #directly related to memory, if maxBlockSize<total genes, multiple blocks will have to be used -> worse clustering
deepSplit = 4,
TOMType = "unsigned", #unsigned?
power = softPw,
mergeCutHeight = 0.3,#0.3->4799#0.8->4799(low module granularity) #0.1->4799(high granularity(lots of colors))
minModuleSize = 20,
numericLabels = FALSE,
pamRespectsDendro = FALSE,
minKMEtoStay = 0.3,#0.3->4799 #0.8->7781 #<0.3 stays the same
randomSeed = 42,
verbose = 4)
cor<-temp_cor
module_eigengenes<-ModNetwork$MEs
#get number of genes for each module
table(ModNetwork$colors)
dim(Nrepl_data) #get total number of genes from the dimensions
#Plot the module colors before and after merging underneath
plotDendroAndColors(ModNetwork$dendrograms[[1]], cbind(ModNetwork$unmergedColors, ModNetwork$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03, #@@ review params
guideHang = 0.05)
levels(as.factor(repl_meta$location))
#Create a relations matrix for the replicates of each species, where both columns and rows are the replicates, a diagonal matrix is created, with all cells as 0 except the diagonal, that is 1
bin_metadata <- data.frame(
cob_b73=as.integer(repl_meta$location=="b73_cob"),
coleoptile_b73=as.integer(repl_meta$location=="b73_coleoptile"),
crown_root_b73=as.integer(repl_meta$location=="b73_crown.root"),
first_elongated_internode_b73=as.integer(repl_meta$location=="b73_first.elongated.internode"),
flag_leaf_b73=as.integer(repl_meta$location=="b73_flag.leaf"),
immature_cob_b73=as.integer(repl_meta$location=="b73_immature.cob"),
immature_tassel_b73=as.integer(repl_meta$location=="b73_immature.tassel"),
leaf_1_b73=as.integer(repl_meta$location=="b73_leaf.1"),
leaf_3_blade_b73=as.integer(repl_meta$location=="b73_leaf.3.blade"),
leaf_3_sheath_b73=as.integer(repl_meta$location=="b73_leaf.3.sheath"),
leaf_5_b73=as.integer(repl_meta$location=="b73_leaf.5"),
leaf_5_elongation_zone_b73=as.integer(repl_meta$location=="b73_leaf.5.elongation.zone"),
leaf_5_mature_b73=as.integer(repl_meta$location=="b73_leaf.5.mature"),
leaf_5_meristem_b73=as.integer(repl_meta$location=="b73_leaf.5.meristem"),
leaf_8_b73=as.integer(repl_meta$location=="b73_leaf.8"),
mature_seed_40_dap_b73=as.integer(repl_meta$location=="b73_mature.seed.40.dap"),
meotic_tassel_b73=as.integer(repl_meta$location=="b73_meotic.tassel"),
mesophyll_b73=as.integer(repl_meta$location=="b73_mesophyll"),
prepollinated_cob_b73=as.integer(repl_meta$location=="b73_prepollinated.cob"),
primary_root_b73=as.integer(repl_meta$location=="b73_primary.root"),
primary_root_elongation_zone_b73=as.integer(repl_meta$location=="b73_primary.root.elongation.zone"),
primary_root_meristematic_zone_b73=as.integer(repl_meta$location=="b73_primary.root.meristematic.zone"),
root_hair_zone_b73=as.integer(repl_meta$location=="b73_root.hair.zone"),
seed_10_dap_b73=as.integer(repl_meta$location=="b73_seed.10.dap"),
seed_15_dap_b73=as.integer(repl_meta$location=="b73_seed.15.dap"),
seed_20_dap_b73=as.integer(repl_meta$location=="b73_seed.20.dap"),
seed_25_dap_b73=as.integer(repl_meta$location=="b73_seed.25.dap"),
seed_30_dap_b73=as.integer(repl_meta$location=="b73_seed.30.dap"),
seminal_root_b73=as.integer(repl_meta$location=="b73_seminal.root"),
silk_b73=as.integer(repl_meta$location=="b73_silk"),
cob_dk105=as.integer(repl_meta$location=="dk105_cob"),
coleoptile_dk105=as.integer(repl_meta$location=="dk105_coleoptile"),
crown_root_dk105=as.integer(repl_meta$location=="dk105_crown.root"),
first_elongated_internode_dk105=as.integer(repl_meta$location=="dk105_first.elongated.internode"),
flag_leaf_dk105=as.integer(repl_meta$location=="dk105_flag.leaf"),
immature_cob_dk105=as.integer(repl_meta$location=="dk105_immature.cob"),
immature_tassel_dk105=as.integer(repl_meta$location=="dk105_immature.tassel"),
leaf_1_dk105=as.integer(repl_meta$location=="dk105_leaf.1"),
leaf_3_blade_dk105=as.integer(repl_meta$location=="dk105_leaf.3.blade"),
leaf_3_sheath_dk105=as.integer(repl_meta$location=="dk105_leaf.3.sheath"),
leaf_5_dk105=as.integer(repl_meta$location=="dk105_leaf.5"),
leaf_5_elongation_zone_dk105=as.integer(repl_meta$location=="dk105_leaf.5.elongation.zone"),
leaf_5_mature_dk105=as.integer(repl_meta$location=="dk105_leaf.5.mature"),
leaf_5_meristem_dk105=as.integer(repl_meta$location=="dk105_leaf.5.meristem"),
leaf_8_dk105=as.integer(repl_meta$location=="dk105_leaf.8"),
mature_seed_40_dap_dk105=as.integer(repl_meta$location=="dk105_mature.seed.40.dap"),
meotic_tassel_dk105=as.integer(repl_meta$location=="dk105_meotic.tassel"),
mesophyll_dk105=as.integer(repl_meta$location=="dk105_mesophyll"),
prepollinated_cob_dk105=as.integer(repl_meta$location=="dk105_prepollinated.cob"),
primary_root_dk105=as.integer(repl_meta$location=="dk105_primary.root"),
primary_root_elongation_zone_dk105=as.integer(repl_meta$location=="dk105_primary.root.elongation.zone"),
primary_root_meristematic_zone_dk105=as.integer(repl_meta$location=="dk105_primary.root.meristematic.zone"),
root_hair_zone_dk105=as.integer(repl_meta$location=="dk105_root.hair.zone"),
seed_10_dap_dk105=as.integer(repl_meta$location=="dk105_seed.10.dap"),
seed_15_dap_dk105=as.integer(repl_meta$location=="dk105_seed.15.dap"),
seed_20_dap_dk105=as.integer(repl_meta$location=="dk105_seed.20.dap"),
seed_25_dap_dk105=as.integer(repl_meta$location=="dk105_seed.25.dap"),
seed_30_dap_dk105=as.integer(repl_meta$location=="dk105_seed.30.dap"),
seminal_root_dk105=as.integer(repl_meta$location=="dk105_seminal.root"),
silk_dk105=as.integer(repl_meta$location=="dk105_silk"),
cob_ep1=as.integer(repl_meta$location=="ep1_cob"),
coleoptile_ep1=as.integer(repl_meta$location=="ep1_coleoptile"),
crown_root_ep1=as.integer(repl_meta$location=="ep1_crown.root"),
first_elongated_internode_ep1=as.integer(repl_meta$location=="ep1_first.elongated.internode"),
flag_leaf_ep1=as.integer(repl_meta$location=="ep1_flag.leaf"),
immature_cob_ep1=as.integer(repl_meta$location=="ep1_immature.cob"),
immature_tassel_ep1=as.integer(repl_meta$location=="ep1_immature.tassel"),
leaf_1_ep1=as.integer(repl_meta$location=="ep1_leaf.1"),
leaf_3_blade_ep1=as.integer(repl_meta$location=="ep1_leaf.3.blade"),
leaf_3_sheath_ep1=as.integer(repl_meta$location=="ep1_leaf.3.sheath"),
leaf_5_ep1=as.integer(repl_meta$location=="ep1_leaf.5"),
leaf_5_elongation_zone_ep1=as.integer(repl_meta$location=="ep1_leaf.5.elongation.zone"),
leaf_5_mature_ep1=as.integer(repl_meta$location=="ep1_leaf.5.mature"),
leaf_5_meristem_ep1=as.integer(repl_meta$location=="ep1_leaf.5.meristem"),
leaf_8_ep1=as.integer(repl_meta$location=="ep1_leaf.8"),
mature_seed_40_dap_ep1=as.integer(repl_meta$location=="ep1_mature.seed.40.dap"),
meotic_tassel_ep1=as.integer(repl_meta$location=="ep1_meotic.tassel"),
mesophyll_ep1=as.integer(repl_meta$location=="ep1_mesophyll"),
prepollinated_cob_ep1=as.integer(repl_meta$location=="ep1_prepollinated.cob"),
primary_root_ep1=as.integer(repl_meta$location=="ep1_primary.root"),
primary_root_elongation_zone_ep1=as.integer(repl_meta$location=="ep1_primary.root.elongation.zone"),
primary_root_meristematic_zone_ep1=as.integer(repl_meta$location=="ep1_primary.root.meristematic.zone"),
root_hair_zone_ep1=as.integer(repl_meta$location=="ep1_root.hair.zone"),
seed_10_dap_ep1=as.integer(repl_meta$location=="ep1_seed.10.dap"),
seed_15_dap_ep1=as.integer(repl_meta$location=="ep1_seed.15.dap"),
seed_20_dap_ep1=as.integer(repl_meta$location=="ep1_seed.20.dap"),
seed_25_dap_ep1=as.integer(repl_meta$location=="ep1_seed.25.dap"),
seed_30_dap_ep1=as.integer(repl_meta$location=="ep1_seed.30.dap"),
seminal_root_ep1=as.integer(repl_meta$location=="ep1_seminal.root"),
silk_ep1=as.integer(repl_meta$location=="ep1_silk"),
cob_f7=as.integer(repl_meta$location=="f7_cob"),
coleoptile_f7=as.integer(repl_meta$location=="f7_coleoptile"),
crown_root_f7=as.integer(repl_meta$location=="f7_crown.root"),
first_elongated_internode_f7=as.integer(repl_meta$location=="f7_first.elongated.internode"),
flag_leaf_f7=as.integer(repl_meta$location=="f7_flag.leaf"),
immature_cob_f7=as.integer(repl_meta$location=="f7_immature.cob"),
immature_tassel_f7=as.integer(repl_meta$location=="f7_immature.tassel"),
leaf_1_f7=as.integer(repl_meta$location=="f7_leaf.1"),
leaf_3_blade_f7=as.integer(repl_meta$location=="f7_leaf.3.blade"),
leaf_3_sheath_f7=as.integer(repl_meta$location=="f7_leaf.3.sheath"),
leaf_5_f7=as.integer(repl_meta$location=="f7_leaf.5"),
leaf_5_elongation_zone_f7=as.integer(repl_meta$location=="f7_leaf.5.elongation.zone"),
leaf_5_mature_f7=as.integer(repl_meta$location=="f7_leaf.5.mature"),
leaf_5_meristem_f7=as.integer(repl_meta$location=="f7_leaf.5.meristem"),
leaf_8_f7=as.integer(repl_meta$location=="f7_leaf.8"),
mature_seed_40_dap_f7=as.integer(repl_meta$location=="f7_mature.seed.40.dap"),
meotic_tassel_f7=as.integer(repl_meta$location=="f7_meotic.tassel"),
mesophyll_f7=as.integer(repl_meta$location=="f7_mesophyll"),
prepollinated_cob_f7=as.integer(repl_meta$location=="f7_prepollinated.cob"),
primary_root_f7=as.integer(repl_meta$location=="f7_primary.root"),
primary_root_elongation_zone_f7=as.integer(repl_meta$location=="f7_primary.root.elongation.zone"),
primary_root_meristematic_zone_f7=as.integer(repl_meta$location=="f7_primary.root.meristematic.zone"),
root_hair_zone_f7=as.integer(repl_meta$location=="f7_root.hair.zone"),
seed_10_dap_f7=as.integer(repl_meta$location=="f7_seed.10.dap"),
seed_15_dap_f7=as.integer(repl_meta$location=="f7_seed.15.dap"),
seed_20_dap_f7=as.integer(repl_meta$location=="f7_seed.20.dap"),
seed_25_dap_f7=as.integer(repl_meta$location=="f7_seed.25.dap"),
seed_30_dap_f7=as.integer(repl_meta$location=="f7_seed.30.dap"),
seminal_root_f7=as.integer(repl_meta$location=="f7_seminal.root"),
silk_f7=as.integer(repl_meta$location=="f7_silk"),
cob_pe75=as.integer(repl_meta$location=="pe75_cob"),
coleoptile_pe75=as.integer(repl_meta$location=="pe75_coleoptile"),
crown_root_pe75=as.integer(repl_meta$location=="pe75_crown.root"),
first_elongated_internode_pe75=as.integer(repl_meta$location=="pe75_first.elongated.internode"),
flag_leaf_pe75=as.integer(repl_meta$location=="pe75_flag.leaf"),
immature_cob_pe75=as.integer(repl_meta$location=="pe75_immature.cob"),
immature_tassel_pe75=as.integer(repl_meta$location=="pe75_immature.tassel"),
leaf_1_pe75=as.integer(repl_meta$location=="pe75_leaf.1"),
leaf_3_blade_pe75=as.integer(repl_meta$location=="pe75_leaf.3.blade"),
leaf_3_sheath_pe75=as.integer(repl_meta$location=="pe75_leaf.3.sheath"),
leaf_5_pe75=as.integer(repl_meta$location=="pe75_leaf.5"),
leaf_5_elongation_zone_pe75=as.integer(repl_meta$location=="pe75_leaf.5.elongation.zone"),
leaf_5_mature_pe75=as.integer(repl_meta$location=="pe75_leaf.5.mature"),
leaf_5_meristem_pe75=as.integer(repl_meta$location=="pe75_leaf.5.meristem"),
leaf_8_pe75=as.integer(repl_meta$location=="pe75_leaf.8"),
mature_seed_40_dap_pe75=as.integer(repl_meta$location=="pe75_mature.seed.40.dap"),
meotic_tassel_pe75=as.integer(repl_meta$location=="pe75_meotic.tassel"),
mesophyll_pe75=as.integer(repl_meta$location=="pe75_mesophyll"),
prepollinated_cob_pe75=as.integer(repl_meta$location=="pe75_prepollinated.cob"),
primary_root_pe75=as.integer(repl_meta$location=="pe75_primary.root"),
primary_root_elongation_zone_pe75=as.integer(repl_meta$location=="pe75_primary.root.elongation.zone"),
primary_root_meristematic_zone_pe75=as.integer(repl_meta$location=="pe75_primary.root.meristematic.zone"),
root_hair_zone_pe75=as.integer(repl_meta$location=="pe75_root.hair.zone"),
seed_10_dap_pe75=as.integer(repl_meta$location=="pe75_seed.10.dap"),
seed_15_dap_pe75=as.integer(repl_meta$location=="pe75_seed.15.dap"),
seed_20_dap_pe75=as.integer(repl_meta$location=="pe75_seed.20.dap"),
seed_25_dap_pe75=as.integer(repl_meta$location=="pe75_seed.25.dap"),
seed_30_dap_pe75=as.integer(repl_meta$location=="pe75_seed.30.dap"),
seminal_root_pe75=as.integer(repl_meta$location=="pe75_seminal.root"),
silk_pe75=as.integer(repl_meta$location=="pe75_silk")
)
rownames(bin_metadata)<-rownames(Nrepl_data)
bin_metadata<-bin_metadata[,colSums(bin_metadata)>=1]
#if any tissue is not present in sample, it will be introduced in binarization, as a full 0 column, this line removes it
#remove ME from names
colnames(module_eigengenes)<-gsub("ME", "", colnames(module_eigengenes))
heatmap.data<-merge(module_eigengenes, bin_metadata, by='row.names')
head(heatmap.data)
rownames(heatmap.data)<-heatmap.data$Row.names
heatmap.data$Row.names<-NULL
write.table(heatmap.data, file="./CorPlots/Sp_table.txt")
plotTitle<-paste0("Correlation plot by species using ", NormType)
svg(paste0("./sp_", NormType, "_corplot.svg"), width=1600/60, height=800/60) #sp_CPM_corplot
CorLevelPlot(heatmap.data,
x = colnames(bin_metadata),
y = colnames(module_eigengenes),
titleX="Traits", titleY="Modules", main=plotTitle,
rotLabX = 45, rotTitleY = 90,
cexCorval = 0, cexLabY = 0.7, cexLabX = 0.7
)
dev.off()
colnames(heatmap.data)<-gsub("ME", "", colnames(heatmap.data))
library(reshape2)
modules_data<-heatmap.data[colnames(module_eigengenes)]
long_data <- melt(as.matrix(modules_data))
# Rename columns
colnames(long_data) <- c("Trait", "Module", "Correlation")
# Create the plot
ggplot(long_data, aes(x = Trait, y = Module, fill = Correlation)) +
geom_tile(aes(fill=long_data$Correlation)) +
scale_fill_gradient2(low = "blue", high = "red",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
coord_fixed()
s_bin_metadata<-bin_metadata
s_bin_metadata <- s_bin_metadata[, sort(names(s_bin_metadata))]
s_bin_metadata <- s_bin_metadata[order(rownames(s_bin_metadata)), ]
heatmap.data <- merge(module_eigengenes, s_bin_metadata, by = 'row.names')
head(heatmap.data)
rownames(heatmap.data)<-heatmap.data$Row.names
heatmap.data$Row.names<-NULL
write.table(heatmap.data, file="./CorPlots/Ti_table.txt")
plotTitle<-paste0("Correlation plot by tissue using ", NormType)
svg(paste0("./ti_", NormType, "_corplot.svg"), width=1600/60, height=800/60) #ti_CPM_corplot
CorLevelPlot(heatmap.data,
x = colnames(s_bin_metadata),
y = colnames(module_eigengenes),
titleX="Traits", titleY="Modules", main=plotTitle,
rotLabX = 45, rotTitleY = 90,
cexCorval = 0, cexLabY = 0.7, cexLabX = 0.7
)
dev.off()
ModNetwork$MEs
View(ModNetwork)
ModNetwork$colors
?write.csv
write.csv(ModNetwork$colors, file="fffff.txt")
write.csv(ModNetwork$colors, file="fffff.txt", col.names=c("g", "modules"))
write.csv(ModNetwork$colors, file="fffff.txt", col.names=TRUE)
write.csv(ModNetwork$colors, file="fffff.txt", col.names=FALSE)
d<-ModNetwork$colors
d<-data.frame(ModNetwork$colors)
View(d)
?data.frame
MEg_data<-data.frame(ModNetwork$colors, )
MEg_data<-data.frame(ModNetwork$colors)
row.names(MEg_data)<-"modules"
colnames(MEg_data)<-"modules"
write.table(ModNetwork$colors, file="fffff.txt", col.names=FALSE)
MEg_data<-data.frame(ModNetwork$colors)
colnames(MEg_data)<-"modules"
write.table(ModNetwork$colors, file="fffff.txt")
View(MEg_data)
MEg_data<-data.frame(ModNetwork$colors)
colnames(MEg_data)<-"modules"
write.table(MEg_data, file="fffff.txt"
MEg_data<-data.frame(ModNetwork$colors)
MEg_data<-data.frame(ModNetwork$colors)
colnames(MEg_data)<-"modules"
write.table(MEg_data, file="fffff.txt")
