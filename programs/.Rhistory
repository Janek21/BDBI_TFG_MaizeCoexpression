#scale_color_brewer(palette="Dark2")+
labs(title="Normalized PCA")+
theme_minimal()
#Tissue clusters
png("./ExprPlots/Expression_pca.png", width=1600, height=800)
#svg("./ExprPlots/Expression_pca.svg", width=1600/60, height=800/60)
fviz_pca_ind(N_pca, geom.ind = "point",
habillage = repl_meta$org_location, addEllipses = TRUE, pointshape = 19,
title="Tissue-based classification")+
xlab("")+ylab("")+
theme_bw()+
theme(legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"))
dev.off()
dataPlotter<-function(umap_data, metadata){
plt<-ggplot(as.data.frame(umap_data$layout), aes(x=umap_data$layout[,1], y=umap_data$layout[,2], shape=metadata$species, color=metadata$org_location))+
geom_point(size=8)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
labs(x="", y="", shape="Lines", color="Tissue")+
theme_minimal()
return(plt)
}
sc_Numap_data<-umap(Nrepl_dvData_sc)
ggplotly(dataPlotter(sc_Numap_data, repl_meta)+ggtitle("Normalized-scaled data Umap"))
ggplotly(ggplot(as.data.frame(sc_Numap_data$layout), aes(x=sc_Numap_data$layout[,1], y=sc_Numap_data$layout[,2], color=repl_meta$org_location))+
geom_point(size=5)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
theme_minimal()+ggtitle("Tissue-based"))
ggplot(as.data.frame(sc_Numap_data$layout), aes(x=sc_Numap_data$layout[,1], y=sc_Numap_data$layout[,2], color=repl_meta$species))+
geom_point(size=5)+
scale_shape_manual(values = c(19, 1, 2, 15, 8))+
theme_minimal()+ggtitle("Line-based")
FinalUmap<-umap(Nrepl_dvData_sc, n_neighbors=29, n_epochs=450, min_dist=0.1) #nneighbor:22, 29, 35
ggplotly(dataPlotter(FinalUmap, repl_meta)+geom_point(size=4)+ggtitle("Final UMAP with cleaned data"))
png("./ExprPlots/Expression_umap.png", width=1600, height=800)
#svg("./ExprPlots/Expression_umap.svg", width=1600/60, height=800/60)
dataPlotter(FinalUmap, repl_meta)+ggtitle("")+theme_bw()+
theme(axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="gray"),
panel.grid.minor=element_blank())
dev.off()
#Convert to matrix
expression_matrix<-as.matrix(Nrepl_data)
sample_correlations<-cor(expression_matrix)
heatmaply(sample_correlations, clustering_method = "complete",
colors = blueWhiteRed(256),
#grid_color = "black",
grid_gap = 0.001)
Nrepl_data<-t(Nrepl_data)
power <- c(c(1:15), seq(from = 17, to = 50, by = 2)) #more detailed in lower values
#Network topology analysis
sft <- pickSoftThreshold(Nrepl_data,
powerVector = power,
networkType = "signed",
verbose = 5)
sftIn<-sft$fitIndices
p1<-ggplot(sftIn, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit\nsigned R^2') +
theme_classic()
p2<-ggplot(sftIn, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 1500) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(p1, p2, nrow=2)
print(sft$powerEstimate)
#Use automatic calculation
if (is.na(sft$powerEstimate)){
softPw<-30 #if the soft power is NA, set to 30, else take smallest possible
}else{
softPw <- min(sft$powerEstimate, 30)
}
temp_cor<-cor
cor<-WGCNA::cor
ModNetwork<-blockwiseModules(Nrepl_data,
nThreads = 32, #16
maxBlockSize = 64000, #directly related to memory, if maxBlockSize<total genes, multiple blocks will have to be used -> worse clustering
deepSplit = 4,
TOMType = "unsigned", #unsigned?
power = softPw,
mergeCutHeight = 0.3,#0.3->4799#0.8->4799(low module granularity) #0.1->4799(high granularity(lots of colors))
minModuleSize = 20,
numericLabels = FALSE,
pamRespectsDendro = FALSE,
minKMEtoStay = 0.3,#0.3->4799 #0.8->7781 #<0.3 stays the same
randomSeed = 42,
verbose = 4)
cor<-temp_cor
module_eigengenes<-ModNetwork$MEs
#get number of genes for each module
table(ModNetwork$colors)
dim(Nrepl_data) #get total number of genes from the dimensions
MEg_data<-data.frame(ModNetwork$colors)
colnames(MEg_data)<-"modules"
#write.table(MEg_data, file="geneModule.txt")
#Plot the module colors before and after merging underneath
plotDendroAndColors(ModNetwork$dendrograms[[1]], cbind(ModNetwork$unmergedColors, ModNetwork$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03, #@@ review params
guideHang = 0.05)
#Plot the module colors before and after merging underneath
plotDendroAndColors(ModNetwork$dendrograms[[1]], cbind(ModNetwork$unmergedColors, ModNetwork$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03, #@@ review params
guideHang = 0.05)
ModNetwork$colors
#Plot the module colors before and after merging underneath
plotDendroAndColors(ModNetwork$dendrograms[[1]], cbind(ModNetwork$unmergedColors, ModNetwork$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03, #@@ review params
guideHang = 0.05)
levels(as.factor(repl_meta$location))
#Create a relations matrix for the replicates of each species, where both columns and rows are the replicates, a diagonal matrix is created, with all cells as 0 except the diagonal, that is 1
bin_metadata <- data.frame(
cob_b73=as.integer(repl_meta$location=="b73_cob"),
coleoptile_b73=as.integer(repl_meta$location=="b73_coleoptile"),
crown_root_b73=as.integer(repl_meta$location=="b73_crown.root"),
first_elongated_internode_b73=as.integer(repl_meta$location=="b73_first.elongated.internode"),
flag_leaf_b73=as.integer(repl_meta$location=="b73_flag.leaf"),
immature_cob_b73=as.integer(repl_meta$location=="b73_immature.cob"),
immature_tassel_b73=as.integer(repl_meta$location=="b73_immature.tassel"),
leaf_1_b73=as.integer(repl_meta$location=="b73_leaf.1"),
leaf_3_blade_b73=as.integer(repl_meta$location=="b73_leaf.3.blade"),
leaf_3_sheath_b73=as.integer(repl_meta$location=="b73_leaf.3.sheath"),
leaf_5_b73=as.integer(repl_meta$location=="b73_leaf.5"),
leaf_5_elongation_zone_b73=as.integer(repl_meta$location=="b73_leaf.5.elongation.zone"),
leaf_5_mature_b73=as.integer(repl_meta$location=="b73_leaf.5.mature"),
leaf_5_meristem_b73=as.integer(repl_meta$location=="b73_leaf.5.meristem"),
leaf_8_b73=as.integer(repl_meta$location=="b73_leaf.8"),
mature_seed_40_dap_b73=as.integer(repl_meta$location=="b73_mature.seed.40.dap"),
meotic_tassel_b73=as.integer(repl_meta$location=="b73_meotic.tassel"),
mesophyll_b73=as.integer(repl_meta$location=="b73_mesophyll"),
prepollinated_cob_b73=as.integer(repl_meta$location=="b73_prepollinated.cob"),
primary_root_b73=as.integer(repl_meta$location=="b73_primary.root"),
primary_root_elongation_zone_b73=as.integer(repl_meta$location=="b73_primary.root.elongation.zone"),
primary_root_meristematic_zone_b73=as.integer(repl_meta$location=="b73_primary.root.meristematic.zone"),
root_hair_zone_b73=as.integer(repl_meta$location=="b73_root.hair.zone"),
seed_10_dap_b73=as.integer(repl_meta$location=="b73_seed.10.dap"),
seed_15_dap_b73=as.integer(repl_meta$location=="b73_seed.15.dap"),
seed_20_dap_b73=as.integer(repl_meta$location=="b73_seed.20.dap"),
seed_25_dap_b73=as.integer(repl_meta$location=="b73_seed.25.dap"),
seed_30_dap_b73=as.integer(repl_meta$location=="b73_seed.30.dap"),
seminal_root_b73=as.integer(repl_meta$location=="b73_seminal.root"),
silk_b73=as.integer(repl_meta$location=="b73_silk"),
cob_dk105=as.integer(repl_meta$location=="dk105_cob"),
coleoptile_dk105=as.integer(repl_meta$location=="dk105_coleoptile"),
crown_root_dk105=as.integer(repl_meta$location=="dk105_crown.root"),
first_elongated_internode_dk105=as.integer(repl_meta$location=="dk105_first.elongated.internode"),
flag_leaf_dk105=as.integer(repl_meta$location=="dk105_flag.leaf"),
immature_cob_dk105=as.integer(repl_meta$location=="dk105_immature.cob"),
immature_tassel_dk105=as.integer(repl_meta$location=="dk105_immature.tassel"),
leaf_1_dk105=as.integer(repl_meta$location=="dk105_leaf.1"),
leaf_3_blade_dk105=as.integer(repl_meta$location=="dk105_leaf.3.blade"),
leaf_3_sheath_dk105=as.integer(repl_meta$location=="dk105_leaf.3.sheath"),
leaf_5_dk105=as.integer(repl_meta$location=="dk105_leaf.5"),
leaf_5_elongation_zone_dk105=as.integer(repl_meta$location=="dk105_leaf.5.elongation.zone"),
leaf_5_mature_dk105=as.integer(repl_meta$location=="dk105_leaf.5.mature"),
leaf_5_meristem_dk105=as.integer(repl_meta$location=="dk105_leaf.5.meristem"),
leaf_8_dk105=as.integer(repl_meta$location=="dk105_leaf.8"),
mature_seed_40_dap_dk105=as.integer(repl_meta$location=="dk105_mature.seed.40.dap"),
meotic_tassel_dk105=as.integer(repl_meta$location=="dk105_meotic.tassel"),
mesophyll_dk105=as.integer(repl_meta$location=="dk105_mesophyll"),
prepollinated_cob_dk105=as.integer(repl_meta$location=="dk105_prepollinated.cob"),
primary_root_dk105=as.integer(repl_meta$location=="dk105_primary.root"),
primary_root_elongation_zone_dk105=as.integer(repl_meta$location=="dk105_primary.root.elongation.zone"),
primary_root_meristematic_zone_dk105=as.integer(repl_meta$location=="dk105_primary.root.meristematic.zone"),
root_hair_zone_dk105=as.integer(repl_meta$location=="dk105_root.hair.zone"),
seed_10_dap_dk105=as.integer(repl_meta$location=="dk105_seed.10.dap"),
seed_15_dap_dk105=as.integer(repl_meta$location=="dk105_seed.15.dap"),
seed_20_dap_dk105=as.integer(repl_meta$location=="dk105_seed.20.dap"),
seed_25_dap_dk105=as.integer(repl_meta$location=="dk105_seed.25.dap"),
seed_30_dap_dk105=as.integer(repl_meta$location=="dk105_seed.30.dap"),
seminal_root_dk105=as.integer(repl_meta$location=="dk105_seminal.root"),
silk_dk105=as.integer(repl_meta$location=="dk105_silk"),
cob_ep1=as.integer(repl_meta$location=="ep1_cob"),
coleoptile_ep1=as.integer(repl_meta$location=="ep1_coleoptile"),
crown_root_ep1=as.integer(repl_meta$location=="ep1_crown.root"),
first_elongated_internode_ep1=as.integer(repl_meta$location=="ep1_first.elongated.internode"),
flag_leaf_ep1=as.integer(repl_meta$location=="ep1_flag.leaf"),
immature_cob_ep1=as.integer(repl_meta$location=="ep1_immature.cob"),
immature_tassel_ep1=as.integer(repl_meta$location=="ep1_immature.tassel"),
leaf_1_ep1=as.integer(repl_meta$location=="ep1_leaf.1"),
leaf_3_blade_ep1=as.integer(repl_meta$location=="ep1_leaf.3.blade"),
leaf_3_sheath_ep1=as.integer(repl_meta$location=="ep1_leaf.3.sheath"),
leaf_5_ep1=as.integer(repl_meta$location=="ep1_leaf.5"),
leaf_5_elongation_zone_ep1=as.integer(repl_meta$location=="ep1_leaf.5.elongation.zone"),
leaf_5_mature_ep1=as.integer(repl_meta$location=="ep1_leaf.5.mature"),
leaf_5_meristem_ep1=as.integer(repl_meta$location=="ep1_leaf.5.meristem"),
leaf_8_ep1=as.integer(repl_meta$location=="ep1_leaf.8"),
mature_seed_40_dap_ep1=as.integer(repl_meta$location=="ep1_mature.seed.40.dap"),
meotic_tassel_ep1=as.integer(repl_meta$location=="ep1_meotic.tassel"),
mesophyll_ep1=as.integer(repl_meta$location=="ep1_mesophyll"),
prepollinated_cob_ep1=as.integer(repl_meta$location=="ep1_prepollinated.cob"),
primary_root_ep1=as.integer(repl_meta$location=="ep1_primary.root"),
primary_root_elongation_zone_ep1=as.integer(repl_meta$location=="ep1_primary.root.elongation.zone"),
primary_root_meristematic_zone_ep1=as.integer(repl_meta$location=="ep1_primary.root.meristematic.zone"),
root_hair_zone_ep1=as.integer(repl_meta$location=="ep1_root.hair.zone"),
seed_10_dap_ep1=as.integer(repl_meta$location=="ep1_seed.10.dap"),
seed_15_dap_ep1=as.integer(repl_meta$location=="ep1_seed.15.dap"),
seed_20_dap_ep1=as.integer(repl_meta$location=="ep1_seed.20.dap"),
seed_25_dap_ep1=as.integer(repl_meta$location=="ep1_seed.25.dap"),
seed_30_dap_ep1=as.integer(repl_meta$location=="ep1_seed.30.dap"),
seminal_root_ep1=as.integer(repl_meta$location=="ep1_seminal.root"),
silk_ep1=as.integer(repl_meta$location=="ep1_silk"),
cob_f7=as.integer(repl_meta$location=="f7_cob"),
coleoptile_f7=as.integer(repl_meta$location=="f7_coleoptile"),
crown_root_f7=as.integer(repl_meta$location=="f7_crown.root"),
first_elongated_internode_f7=as.integer(repl_meta$location=="f7_first.elongated.internode"),
flag_leaf_f7=as.integer(repl_meta$location=="f7_flag.leaf"),
immature_cob_f7=as.integer(repl_meta$location=="f7_immature.cob"),
immature_tassel_f7=as.integer(repl_meta$location=="f7_immature.tassel"),
leaf_1_f7=as.integer(repl_meta$location=="f7_leaf.1"),
leaf_3_blade_f7=as.integer(repl_meta$location=="f7_leaf.3.blade"),
leaf_3_sheath_f7=as.integer(repl_meta$location=="f7_leaf.3.sheath"),
leaf_5_f7=as.integer(repl_meta$location=="f7_leaf.5"),
leaf_5_elongation_zone_f7=as.integer(repl_meta$location=="f7_leaf.5.elongation.zone"),
leaf_5_mature_f7=as.integer(repl_meta$location=="f7_leaf.5.mature"),
leaf_5_meristem_f7=as.integer(repl_meta$location=="f7_leaf.5.meristem"),
leaf_8_f7=as.integer(repl_meta$location=="f7_leaf.8"),
mature_seed_40_dap_f7=as.integer(repl_meta$location=="f7_mature.seed.40.dap"),
meotic_tassel_f7=as.integer(repl_meta$location=="f7_meotic.tassel"),
mesophyll_f7=as.integer(repl_meta$location=="f7_mesophyll"),
prepollinated_cob_f7=as.integer(repl_meta$location=="f7_prepollinated.cob"),
primary_root_f7=as.integer(repl_meta$location=="f7_primary.root"),
primary_root_elongation_zone_f7=as.integer(repl_meta$location=="f7_primary.root.elongation.zone"),
primary_root_meristematic_zone_f7=as.integer(repl_meta$location=="f7_primary.root.meristematic.zone"),
root_hair_zone_f7=as.integer(repl_meta$location=="f7_root.hair.zone"),
seed_10_dap_f7=as.integer(repl_meta$location=="f7_seed.10.dap"),
seed_15_dap_f7=as.integer(repl_meta$location=="f7_seed.15.dap"),
seed_20_dap_f7=as.integer(repl_meta$location=="f7_seed.20.dap"),
seed_25_dap_f7=as.integer(repl_meta$location=="f7_seed.25.dap"),
seed_30_dap_f7=as.integer(repl_meta$location=="f7_seed.30.dap"),
seminal_root_f7=as.integer(repl_meta$location=="f7_seminal.root"),
silk_f7=as.integer(repl_meta$location=="f7_silk"),
cob_pe75=as.integer(repl_meta$location=="pe75_cob"),
coleoptile_pe75=as.integer(repl_meta$location=="pe75_coleoptile"),
crown_root_pe75=as.integer(repl_meta$location=="pe75_crown.root"),
first_elongated_internode_pe75=as.integer(repl_meta$location=="pe75_first.elongated.internode"),
flag_leaf_pe75=as.integer(repl_meta$location=="pe75_flag.leaf"),
immature_cob_pe75=as.integer(repl_meta$location=="pe75_immature.cob"),
immature_tassel_pe75=as.integer(repl_meta$location=="pe75_immature.tassel"),
leaf_1_pe75=as.integer(repl_meta$location=="pe75_leaf.1"),
leaf_3_blade_pe75=as.integer(repl_meta$location=="pe75_leaf.3.blade"),
leaf_3_sheath_pe75=as.integer(repl_meta$location=="pe75_leaf.3.sheath"),
leaf_5_pe75=as.integer(repl_meta$location=="pe75_leaf.5"),
leaf_5_elongation_zone_pe75=as.integer(repl_meta$location=="pe75_leaf.5.elongation.zone"),
leaf_5_mature_pe75=as.integer(repl_meta$location=="pe75_leaf.5.mature"),
leaf_5_meristem_pe75=as.integer(repl_meta$location=="pe75_leaf.5.meristem"),
leaf_8_pe75=as.integer(repl_meta$location=="pe75_leaf.8"),
mature_seed_40_dap_pe75=as.integer(repl_meta$location=="pe75_mature.seed.40.dap"),
meotic_tassel_pe75=as.integer(repl_meta$location=="pe75_meotic.tassel"),
mesophyll_pe75=as.integer(repl_meta$location=="pe75_mesophyll"),
prepollinated_cob_pe75=as.integer(repl_meta$location=="pe75_prepollinated.cob"),
primary_root_pe75=as.integer(repl_meta$location=="pe75_primary.root"),
primary_root_elongation_zone_pe75=as.integer(repl_meta$location=="pe75_primary.root.elongation.zone"),
primary_root_meristematic_zone_pe75=as.integer(repl_meta$location=="pe75_primary.root.meristematic.zone"),
root_hair_zone_pe75=as.integer(repl_meta$location=="pe75_root.hair.zone"),
seed_10_dap_pe75=as.integer(repl_meta$location=="pe75_seed.10.dap"),
seed_15_dap_pe75=as.integer(repl_meta$location=="pe75_seed.15.dap"),
seed_20_dap_pe75=as.integer(repl_meta$location=="pe75_seed.20.dap"),
seed_25_dap_pe75=as.integer(repl_meta$location=="pe75_seed.25.dap"),
seed_30_dap_pe75=as.integer(repl_meta$location=="pe75_seed.30.dap"),
seminal_root_pe75=as.integer(repl_meta$location=="pe75_seminal.root"),
silk_pe75=as.integer(repl_meta$location=="pe75_silk")
)
rownames(bin_metadata)<-rownames(Nrepl_data)
bin_metadata<-bin_metadata[,colSums(bin_metadata)>=1]
#if any tissue is not present in sample, it will be introduced in binarization, as a full 0 column, this line removes it
#remove ME from names
colnames(module_eigengenes)<-gsub("ME", "", colnames(module_eigengenes))
ggplot(metadata, aes(x=quality, fill=specie))+
geom_bar()+
coord_cartesian(ylim = c(0, 50))+
scale_fill_brewer(palette="Dark2")+
labs(x="Quality score", y="Repetitions", fill="Species")+
geom_text(data=q_count, aes(x=score, y=value, label=value), inherit.aes=FALSE, vjust= -0.5, size=9)+
theme_bw()+
theme(legend.key.width=unit(3, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ModNetwork$colors
color<-as.data.frame(ModNetwork$colors)
View(color)
rownames(ModNetwork$colors)
color$gene<-rownames(color)
View(color)
color<-data.frame(module=ModNetwork$colors)
View(color)
color<-data.frame(module=ModNetwork$colors)
color$gene<-rownames(color)
ggplot(color, aes(x=module))+
geom_bar()
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_brewer(palette="Dark2")+
labs(x="Quality score", y="Repetitions", fill="Species")+
#geom_text(data=q_count, aes(x=score, y=value, label=value), inherit.aes=FALSE, vjust= -0.5, size=9)+
theme_bw()+
theme(legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module))+
geom_bar()+
scale_fill_brewer(palette="Dark2")+
labs(x="Quality score", y="Repetitions", fill="Species")+
#geom_text(data=q_count, aes(x=score, y=value, label=value), inherit.aes=FALSE, vjust= -0.5, size=9)+
theme_bw()+
theme(legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module))+
geom_bar()+
scale_fill_manual(values=color$module)
color$module
color<-data.frame(module=ModNetwork$colors, stringsAsFactors=TRUE)
color$gene<-rownames(color)
color$module
ggplot(color, aes(x=module))+
geom_bar()+
scale_fill_manual(values=color$module)+
labs(x="Quality score", y="Repetitions", fill="Species")+
#geom_text(data=q_count, aes(x=score, y=value, label=value), inherit.aes=FALSE, vjust= -0.5, size=9)+
theme_bw()+
theme(legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module))+
geom_bar()+
scale_fill_manual(values=color$module)
ggplot(color, aes(x=module))+
geom_bar()+
scale_fill_manual(values=levels(color$module))
ggplot(color, aes(x=module))+
geom_bar()+
scale_fill_manual(values=unique(color$module))
ggplot(color, aes(x=module fill=module))+
ggplot(color, aes(x=module, fill=module))+
geom_bar()
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_manual(values=color$module)
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()
theme_bw()+
theme(legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.title.x=element_text(color="black", size=10, rotate=45),
axis.title.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.title.x=element_text(color="black", size=10, ange=45),
axis.title.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.title.x=element_text(color="black", size=10, angle=45),
axis.title.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.element.x=element_text(color="black", size=10, angle=45),
axis.title.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
color<-data.frame(module=ModNetwork$colors, stringsAsFactors=TRUE)
color$gene<-rownames(color)
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.text.x=element_text(color="black", size=10, angle=45),
axis.text.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.text.x=element_text(color="black", size=10, angle=45, hjust=-0.5),
axis.text.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.text.x=element_text(color="black", size=10, angle=45, hjust=0.5),
axis.text.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.text.x=element_text(color="black", size=10, angle=45, hjust=1),
axis.text.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(dataCounts, aes(x=origin, y=value, fill=origin))+
geom_bar(stat="identity", width=0.5)+
geom_text(aes(label=value), vjust= -0.2, size=5)+
labs(x="Data origin", y="Sample number", fill="Data origin")+
theme_linedraw()+
theme(axis.text.x=element_text(color="black", size=10),
axis.text.y=element_text(color="black", size=10),
panel.border=element_rect(linewidth=0),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16))
color<-data.frame(module=ModNetwork$colors, stringsAsFactors=TRUE)
color$gene<-rownames(color)
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.text.x=element_text(color="black", size=10, angle=45, hjust=1),
axis.text.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.text.x=element_text(color="black", size=10, angle=45, hjust=1),
axis.text.y=element_text(color="black", size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=16),
legend.title=element_text(size=20),
panel.border=element_rect(linewidth=1))
ggplot(color, aes(x=module, fill=module))+
geom_bar()+
scale_fill_identity()+
labs(x="Modules", y="Gene number", fill="Module")+
theme_bw()+
theme(axis.text.x=element_text(color="black", size=10, angle=45, hjust=1),
axis.text.y=element_text(color="black", size=10),
panel.border=element_rect(linewidth=1))
