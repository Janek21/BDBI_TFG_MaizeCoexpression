rownames(datALL)<-datALL$Row.names
datALL$Row.names<-NULL
################################################################################
#### Program execution
specieList<-levels(metadata$specie) #get all specie names
#result is B73, a2, etc...
#In the case that its a with length dataset, remove the 0
specieList<-specieList[specieList!=0]
cat("The species are:\n", specieList)
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
names(specieResults) <- specieList #names the lists according to specie (if not it would be 1,2,3,etc)
View(specieResults)
tmp<-lapply(specieList, function(specieName) listSplitter(specieName, specieResults)) #takes dataframes out of nested list and assigns specie name as variable, samples as columns
View(EP1_data)
b<-as.data.frame(EP1_data)
b<-as.data.frame(t(EP1_data))
View(B73_data)
specieCreator<-function(data_joint, spName){ #selects rows of a dataset based on specie column, then splits between data and metadata
cat("\nSeparating by", spName)
data_specie<-data_joint[data_joint$specie == spName, ] #select rows according to metadata$specie column (now in joint),
#data_specie is now a single specie dataset
#Separate back to data and metadata
cat("\nSplitting data and metadata")
geneCols<-grepl("Zm", names(data_specie)) #all gene columns(data) have Zm, so we search for them
data<-data_specie[, geneCols] #data will be gene columns
metadata<-data_specie[, !geneCols] #metadata will be all that is not gene columns
#Add length to the data if it exists
"Length" %in% rownames(data_joint)
if ("Length" %in% rownames(data_joint)){
lengthTotal<-data_joint["Length",] #take the full length row
lengthData<-lengthTotal[, geneCols] #Take only the columns that are genes from the row
data<-rbind(data, lengthData) #Join the full data only dataframe with the row containing the length
}
cat("\n",spName, "specie table created\n")
return(list(data, metadata))
}
listSplitter<-function(specieName, ALLspecieList){ #takes specie name and list of specie lists and makes data and metadata object for each specie
cat("\nSplitting list for", specieName,"\n")
dataName<-paste0(specieName, "_data") #B73_data
mdataName<-paste0(specieName, "_metadata") #B73_metadata
specieData<-ALLspecieList[[specieName]][[1]] #Takes B73 list(produced by specieCreator) from MainList, then takes first item in B73 list (belongs to data)
specieMetadata<-ALLspecieList[[specieName]][[2]] #same but 2nd slot in inner list, so metadata
assign(paste0(dataName), t(specieData), envir = .GlobalEnv) #assigns 1rst inner list to the B73_data name, also transposes this dataframe for rows to be genes and samples columns
assign(paste0(mdataName), specieMetadata, envir = .GlobalEnv) #same but 2nd and metadata
cat("Data and metadata dataframes for", specieName, "are done")
return(NULL)
}
tableWriter<-function(specieName,
data=get(paste0(specieName, "_data")), #path, not file name (ex: Wrong: ./data/f.csv; correct: ./data/)
metadata=get(paste0(specieName, "_metadata")),
resultDataPath,
resultMetaPath){ #write the data and metadata tables
resultDataPath<-paste0(resultDataPath, specieName,".csv")
resultMetaPath<-paste0(resultMetaPath, specieName,"_m.txt")
cat("\nWriting", specieName, "data table to:", resultDataPath)
write.table(data, resultDataPath, row.names=TRUE, sep="\t", eol="\n", col.names = NA)
cat("\nWriting", specieName, "metadata table to:", resultMetaPath, "\n")
write.table(metadata, resultMetaPath, row.names=TRUE, sep="\t", eol="\n", col.names = NA)
return (NULL)
}
################################################################################
#### Dataset collection and preparation
#get args from bash
"args = commandArgs(trailingOnly=TRUE)
dataPath<- args[1]
metadataPath<- args[2]
resultDataPath<- args[3]
resultMetaPath<- args[4]
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=T, row.names=1, stringsAsFactors=TRUE)"
dataNL<-read.delim("../data/original_data/all5gt.wlen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", header=T, row.names=1, stringsAsFactors=TRUE)
resultDataPath<-"../"
resultMetaPath<-"../"
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
#If dataNL is data with Length: create a row in metadata named Length as well, so that the 2 datasets can be joined, later we will remove it
if ("Length" %in% colnames(dataNL)){
metadata<-as.data.frame(t(metadata))
metadata$Length<-rep(0, nrow(metadata))
metadata<-as.data.frame(t(metadata))
metadata$specie<-as.factor(metadata$specie)
}
dataNL<-as.data.frame(t(dataNL))
datALL<-merge(dataNL, metadata, by="row.names")
rownames(datALL)<-datALL$Row.names
datALL$Row.names<-NULL
################################################################################
#### Program execution
specieList<-levels(metadata$specie) #get all specie names
#result is B73, a2, etc...
#In the case that its a with length dataset, remove the 0
specieList<-specieList[specieList!=0]
cat("The species are:\n", specieList)
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
specieCreator<-function(data_joint, spName){ #selects rows of a dataset based on specie column, then splits between data and metadata
cat("\nSeparating by", spName)
data_specie<-data_joint[data_joint$specie == spName, ] #select rows according to metadata$specie column (now in joint),
#data_specie is now a single specie dataset
#Separate back to data and metadata
cat("\nSplitting data and metadata")
geneCols<-grepl("Zm", names(data_specie)) #all gene columns(data) have Zm, so we search for them
data<-data_specie[, geneCols] #data will be gene columns
metadata<-data_specie[, !geneCols] #metadata will be all that is not gene columns
#Add length to the data if it exists
print("Length" %in% rownames(data_joint))
if ("Length" %in% rownames(data_joint)){
lengthTotal<-data_joint["Length",] #take the full length row
lengthData<-lengthTotal[, geneCols] #Take only the columns that are genes from the row
data<-rbind(data, lengthData) #Join the full data only dataframe with the row containing the length
}
cat("\n",spName, "specie table created\n")
return(list(data, metadata))
}
dataNL<-read.delim("../data/original_data/all5gt.wlen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", header=T, row.names=1, stringsAsFactors=TRUE)
resultDataPath<-"../"
resultMetaPath<-"../"
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
#If dataNL is data with Length: create a row in metadata named Length as well, so that the 2 datasets can be joined, later we will remove it
if ("Length" %in% colnames(dataNL)){
metadata<-as.data.frame(t(metadata))
metadata$Length<-rep(0, nrow(metadata))
metadata<-as.data.frame(t(metadata))
metadata$specie<-as.factor(metadata$specie)
}
dataNL<-as.data.frame(t(dataNL))
datALL<-merge(dataNL, metadata, by="row.names")
rownames(datALL)<-datALL$Row.names
datALL$Row.names<-NULL
specieList<-levels(metadata$specie) #get all specie names
#In the case that its a with length dataset, remove the 0
specieList<-specieList[specieList!=0]
cat("The species are:\n", specieList)
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
specieCreator<-function(data_joint, spName){ #selects rows of a dataset based on specie column, then splits between data and metadata
cat("\nSeparating by", spName)
data_specie<-data_joint[data_joint$specie == spName, ] #select rows according to metadata$specie column (now in joint),
#data_specie is now a single specie dataset
#Separate back to data and metadata
cat("\nSplitting data and metadata")
geneCols<-grepl("Zm", names(data_specie)) #all gene columns(data) have Zm, so we search for them
data<-data_specie[, geneCols] #data will be gene columns
metadata<-data_specie[, !geneCols] #metadata will be all that is not gene columns
#Add length to the data if it exists
if ("Length" %in% rownames(data_joint)){
lengthTotal<-data_joint["Length",] #take the full length row
lengthData<-lengthTotal[, geneCols] #Take only the columns that are genes from the row
data<-rbind(data, lengthData) #Join the full data only dataframe with the row containing the length
data["Length",]
}
cat("\n",spName, "specie table created\n")
return(list(data, metadata))
}
dataNL<-read.delim("../data/original_data/all5gt.wlen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", header=T, row.names=1, stringsAsFactors=TRUE)
resultDataPath<-"../"
resultMetaPath<-"../"
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
#If dataNL is data with Length: create a row in metadata named Length as well, so that the 2 datasets can be joined, later we will remove it
if ("Length" %in% colnames(dataNL)){
metadata<-as.data.frame(t(metadata))
metadata$Length<-rep(0, nrow(metadata))
metadata<-as.data.frame(t(metadata))
metadata$specie<-as.factor(metadata$specie)
}
dataNL<-as.data.frame(t(dataNL))
datALL<-merge(dataNL, metadata, by="row.names")
rownames(datALL)<-datALL$Row.names
datALL$Row.names<-NULL
################################################################################
#### Program execution
specieList<-levels(metadata$specie) #get all specie names
#result is B73, a2, etc...
#In the case that its a with length dataset, remove the 0
specieList<-specieList[specieList!=0]
cat("The species are:\n", specieList)
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
specieCreator<-function(data_joint, spName){ #selects rows of a dataset based on specie column, then splits between data and metadata
cat("\nSeparating by", spName)
data_specie<-data_joint[data_joint$specie == spName, ] #select rows according to metadata$specie column (now in joint),
#data_specie is now a single specie dataset
#Separate back to data and metadata
cat("\nSplitting data and metadata")
geneCols<-grepl("Zm", names(data_specie)) #all gene columns(data) have Zm, so we search for them
data<-data_specie[, geneCols] #data will be gene columns
metadata<-data_specie[, !geneCols] #metadata will be all that is not gene columns
#Add length to the data if it exists
if ("Length" %in% rownames(data_joint)){
lengthTotal<-data_joint["Length",] #take the full length row
lengthData<-lengthTotal[, geneCols] #Take only the columns that are genes from the row
data<-rbind(data, lengthData) #Join the full data only dataframe with the row containing the length
print(data["Length",])
}
cat("\n",spName, "specie table created\n")
return(list(data, metadata))
}
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
specieCreator<-function(data_joint, spName){ #selects rows of a dataset based on specie column, then splits between data and metadata
cat("\nSeparating by", spName)
data_specie<-data_joint[data_joint$specie == spName, ] #select rows according to metadata$specie column (now in joint),
#data_specie is now a single specie dataset
#Separate back to data and metadata
cat("\nSplitting data and metadata")
geneCols<-grepl("Zm", names(data_specie)) #all gene columns(data) have Zm, so we search for them
data<-data_specie[, geneCols] #data will be gene columns
metadata<-data_specie[, !geneCols] #metadata will be all that is not gene columns
#Add length to the data if it exists
if ("Length" %in% rownames(data_joint)){
lengthTotal<-data_joint["Length",] #take the full length row
lengthData<-lengthTotal[, geneCols] #Take only the columns that are genes from the row
data<-rbind(data, lengthData) #Join the full data only dataframe with the row containing the length
tail(data["Length",])
}
cat("\n",spName, "specie table created\n")
return(list(data, metadata))
}
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
names(specieResults) <- specieList #names the lists according to specie (if not it would be 1,2,3,etc)
specieCreator<-function(data_joint, spName){ #selects rows of a dataset based on specie column, then splits between data and metadata
cat("\nSeparating by", spName)
data_specie<-data_joint[data_joint$specie == spName, ] #select rows according to metadata$specie column (now in joint),
#data_specie is now a single specie dataset
#Separate back to data and metadata
cat("\nSplitting data and metadata")
geneCols<-grepl("Zm", names(data_specie)) #all gene columns(data) have Zm, so we search for them
data<-data_specie[, geneCols] #data will be gene columns
metadata<-data_specie[, !geneCols] #metadata will be all that is not gene columns
#Add length to the data if it exists
if ("Length" %in% rownames(data_joint)){
lengthTotal<-data_joint["Length",] #take the full length row
lengthData<-lengthTotal[, geneCols] #Take only the columns that are genes from the row
data<-rbind(data, lengthData) #Join the full data only dataframe with the row containing the length
print(rownames(data))
}
cat("\n",spName, "specie table created\n")
return(list(data, metadata))
}
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
names(specieResults) <- specieList #names the lists according to specie (if not it would be 1,2,3,etc)
tmp<-lapply(specieList, function(specieName) listSplitter(specieName, specieResults)) #takes dataframes out of nested list and assigns specie name as variable, samples as columns
View(PE75_data)
colnames(PE75_data)
PE75_data$Length
listRows<-sapply(specieResults, function(specieSublist) nrow(specieSublist[[1]])) #get number of rows of each specie, and put them on a vector
cat("\n\nNumber of rows of original dataframe:", nrow(datALL))
cat("\nTotal rows of all resulting databases combined:", sum(listRows), "\n")
dataNL<-read.delim("../data/original_data/all5gt.noen.csv", row.names=1, stringsAsFactors=TRUE)
dataNL<-read.delim("../data/original_data/all5gt.nolen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", header=T, row.names=1, stringsAsFactors=TRUE)
resultDataPath<-"../"
resultMetaPath<-"../"
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
"Length" %in% colnames(dataNL)
#If dataNL is data with Length: create a row in metadata named Length as well, so that the 2 datasets can be joined, later we will remove it
if ("Length" %in% colnames(dataNL)){
metadata<-as.data.frame(t(metadata))
metadata$Length<-rep(0, nrow(metadata))
metadata<-as.data.frame(t(metadata))
metadata$specie<-as.factor(metadata$specie)
}
dataNL<-as.data.frame(t(dataNL))
datALL<-merge(dataNL, metadata, by="row.names")
rownames(datALL)<-datALL$Row.names
datALL$Row.names<-NULL
specieList<-levels(metadata$specie) #get all specie names
cat("The species are:\n", specieList)
#In the case that its a with length dataset, remove the 0
specieList<-specieList[specieList!=0]
cat("The species are:\n", specieList)
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
colnames(PE75_data)
#### Functions
specieCreator<-function(data_joint, spName){ #selects rows of a dataset based on specie column, then splits between data and metadata
cat("\nSeparating by", spName)
data_specie<-data_joint[data_joint$specie == spName, ] #select rows according to metadata$specie column (now in joint),
#data_specie is now a single specie dataset
#Separate back to data and metadata
cat("\nSplitting data and metadata")
geneCols<-grepl("Zm", names(data_specie)) #all gene columns(data) have Zm, so we search for them
data<-data_specie[, geneCols] #data will be gene columns
metadata<-data_specie[, !geneCols] #metadata will be all that is not gene columns
print("Length" %in% rownames(data_joint))
#Add length to the data if it exists
if ("Length" %in% rownames(data_joint)){
lengthTotal<-data_joint["Length",] #take the full length row
lengthData<-lengthTotal[, geneCols] #Take only the columns that are genes from the row
data<-rbind(data, lengthData) #Join the full data only dataframe with the row containing the length
}
cat("\n",spName, "specie table created\n")
return(list(data, metadata))
}
listSplitter<-function(specieName, ALLspecieList){ #takes specie name and list of specie lists and makes data and metadata object for each specie
cat("\nSplitting list for", specieName,"\n")
dataName<-paste0(specieName, "_data") #B73_data
mdataName<-paste0(specieName, "_metadata") #B73_metadata
specieData<-ALLspecieList[[specieName]][[1]] #Takes B73 list(produced by specieCreator) from MainList, then takes first item in B73 list (belongs to data)
specieMetadata<-ALLspecieList[[specieName]][[2]] #same but 2nd slot in inner list, so metadata
assign(paste0(dataName), t(specieData), envir = .GlobalEnv) #assigns 1rst inner list to the B73_data name, also transposes this dataframe for rows to be genes and samples columns
assign(paste0(mdataName), specieMetadata, envir = .GlobalEnv) #same but 2nd and metadata
cat("Data and metadata dataframes for", specieName, "are done")
return(NULL)
}
tableWriter<-function(specieName,
data=get(paste0(specieName, "_data")), #path, not file name (ex: Wrong: ./data/f.csv; correct: ./data/)
metadata=get(paste0(specieName, "_metadata")),
resultDataPath,
resultMetaPath){ #write the data and metadata tables
resultDataPath<-paste0(resultDataPath, specieName,".csv")
resultMetaPath<-paste0(resultMetaPath, specieName,"_m.txt")
cat("\nWriting", specieName, "data table to:", resultDataPath)
write.table(data, resultDataPath, row.names=TRUE, sep="\t", eol="\n", col.names = NA)
cat("\nWriting", specieName, "metadata table to:", resultMetaPath, "\n")
write.table(metadata, resultMetaPath, row.names=TRUE, sep="\t", eol="\n", col.names = NA)
return (NULL)
}
################################################################################
#### Dataset collection and preparation
#get args from bash
"args = commandArgs(trailingOnly=TRUE)
dataPath<- args[1]
metadataPath<- args[2]
resultDataPath<- args[3]
resultMetaPath<- args[4]
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=T, row.names=1, stringsAsFactors=TRUE)"
dataNL<-read.delim("../data/original_data/all5gt.nolen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", header=T, row.names=1, stringsAsFactors=TRUE)
resultDataPath<-"../"
resultMetaPath<-"../"
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
#If dataNL is data with Length: create a row in metadata named Length as well, so that the 2 datasets can be joined, later we will remove it
if ("Length" %in% colnames(dataNL)){
metadata<-as.data.frame(t(metadata))
metadata$Length<-rep(0, nrow(metadata))
metadata<-as.data.frame(t(metadata))
metadata$specie<-as.factor(metadata$specie)
}
dataNL<-as.data.frame(t(dataNL))
datALL<-merge(dataNL, metadata, by="row.names")
rownames(datALL)<-datALL$Row.names
datALL$Row.names<-NULL
################################################################################
#### Program execution
specieList<-levels(metadata$specie) #get all specie names
#In the case that its a with length dataset, remove the 0
specieList<-specieList[specieList!=0]
cat("The species are:\n", specieList)
dataNL<-read.delim("../data/original_data/all5gt.nolen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", header=T, row.names=1, stringsAsFactors=TRUE)
resultDataPath<-"../"
resultMetaPath<-"../"
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
#If dataNL is data with Length: create a row in metadata named Length as well, so that the 2 datasets can be joined, later we will remove it
if ("Length" %in% colnames(dataNL)){
metadata<-as.data.frame(t(metadata))
metadata$Length<-rep(0, nrow(metadata))
metadata<-as.data.frame(t(metadata))
metadata$specie<-as.factor(metadata$specie)
}
dataNL<-as.data.frame(t(dataNL))
datALL<-merge(dataNL, metadata, by="row.names")
rownames(datALL)<-datALL$Row.names
datALL$Row.names<-NULL
specieList<-levels(metadata$specie) #get all specie names
cat("The species are:\n", specieList)
#In the case that its a with length dataset, remove the 0
specieList<-specieList[specieList!=0]
specieResults <- lapply(specieList, function(specieName) specieCreator(datALL, specieName)) #creates a Main list containing each specie list produced by specieCreator
names(specieResults) <- specieList #names the lists according to specie (if not it would be 1,2,3,etc)
tmp<-lapply(specieList, function(specieName) listSplitter(specieName, specieResults)) #takes dataframes out of nested list and assigns specie name as variable, samples as columns
colnames(B73_data)
colnames(PE75_data)
listRows<-sapply(specieResults, function(specieSublist) nrow(specieSublist[[1]])) #get number of rows of each specie, and put them on a vector
cat("\n\nNumber of rows of original dataframe:", nrow(datALL))
cat("\nTotal rows of all resulting databases combined:", sum(listRows), "\n")
tmp<-lapply(specieList, function(specieName) tableWriter(specieName, resultDataPath=resultDataPath, resultMetaPath=resultMetaPath))
dataNL<-read.delim("../data/wlen/B73.csv", row.names=1, stringsAsFactors=TRUE)
dataNL<-read.delim("../data/wlen/B73.csv", row.names=1, stringsAsFactors=TRUE)
View(dataNL)
dataPath<-"./../data/original_data/all5gt.wlen.csv"
metadataPath"./../data/original_data/sample.tissue.correct.cluadj.txt"
data<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=FALSE, row.names=1, stringsAsFactors=TRUE)
metadataPath<-"./../data/original_data/sample.tissue.correct.cluadj.txt"
data<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=FALSE, row.names=1, stringsAsFactors=TRUE)
"Length" %in% colnames(data)
metadata<-as.data.frame(t(metadata))
metadata$Length<-rep(0, nrow(metadata))
metadata<-as.data.frame(t(metadata))
metadata$specie<-as.factor(metadata$specie)
View(metadata)
#data matcher function
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(data, metadata)
dataNL<-read.delim("../data/wlen/B73.csv", row.names=1, stringsAsFactors=TRUE)
View(dataNL)
dataNL$Length
data<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
data<-read.delim("../data/nolen/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/metadata.txt", header=T, row.names=1, stringsAsFactors=TRUE)
data<-read.delim("../data/original_data/all5gt.nolen.csv", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", header=T, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim("../data/original_data/sample.tissue.correct.cluadj.txt", header=F, row.names=1, stringsAsFactors=TRUE)
table(metadata$V3)
table(metadata$V4)
table(metadata$V2)
table(metadata$V5)
metadata[metadata$V5=="P"]
metadata[metadata$V5=="P",]
metadata[metadata$V6=="pollen",]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(purl = TRUE)
library(WGCNA)
allowWGCNAThreads()
library(randomcoloR)
library(edgeR)
library(tidyverse)
library(dplyr)
library(gridExtra)
#devtools::install_github("kevinblighe/CorLevelPlot")
library(CorLevelPlot)
library(ggpubr)
#"B73"   "DK105" "EP1"   "F7"    "PE75"
specie<-"PE75"
dataPath<-paste0("../data/wlen/", specie, ".csv")
metadataPath<-paste0("../data/wlen/", specie, "_m.txt")
dataNL<-read.delim(dataPath, row.names=1, stringsAsFactors=TRUE)
metadata<-read.delim(metadataPath, header=T, row.names=1, stringsAsFactors=TRUE)
#dataNL<-read.delim("../data/data_nolen.csv", row.names=1, stringsAsFactors=TRUE)
#metadata<-read.delim("../data/metadata.txt", header=T, row.names=1, stringsAsFactors=TRUE)
colnames(metadata)<-c("specie", "quality", "tissue_abv", "rep", "location")
if ("Length" %in% colnames(dataNL)){
length_vec<-dataNL$Length
}
dim(dataNL)
dim(metadata)
dataMatcher<-function(data, metadata){
options(warn=-1)
cat("Data begins with:" , dim(data))
cat("\nMetadata begins with:", dim(metadata))
#Match data to metadata
data <- data[, order(colnames(data))]
metadata <- metadata[order(rownames(metadata)), ]
cat("\nColumns data = Rows of metatdata?", all(rownames(metadata) == colnames(data)))
#If TRUE, columns of data and rows of metadata are matched
cat("\nRemove the excess from data")
data<-data[,colnames(data) %in% rownames(metadata)] #remove data not present in metadata
cat("\nData end with:" , dim(data))
cat("\nRemove the excess from metadata")
metadata<-metadata[rownames(metadata) %in% colnames(data),] #remove metadata not present in data
cat("\nMetadata end with:" , dim(metadata), "\n")
options(warn=0)
return(list(data, metadata))
}
jointData<-dataMatcher(dataNL, metadata)
dataNL<-jointData[[1]]
metadata<-jointData[[2]]
#Should be all 0 due to preprocessing filtering
levels(as.factor(metadata$quality))
#Mapped abreviations
levels(metadata$tissue_abv)
#reps 1,2,3 and 4, is there an imbalance?
table(metadata$rep)
levels(metadata$location)
#Different rep aoumts indicate different amount of each replicate
table(metadata$location)
#there are different total numbers of tissue replicates
#Solve it by using 1 replicate per tissue (mean of exisitng replicates)
#@@ may not be a good idea to remove genes
outDetect<-goodSamplesGenes(t(dataNL))
table(outDetect$goodGenes) #False genes are outliers
table(outDetect$goodSamples) #All samples are True = no outliers
dataNL<-dataNL[outDetect$goodGenes==TRUE,] #remove ouliers
if (exists("length_vec")){ #only if it exists
length_vec<-length_vec[outDetect$goodGenes==TRUE] #if length_vec exists remove outliers from there as well
}
rsumer<-function(data, metadata, tissue_name){ #calculates the mean of all columns that belong to a location (mean of all COB columns)
loc_mdata<-metadata[metadata$location == tissue_name, ] #filter metadata tissue (get metadata of location only)
data<-data[,colnames(data) %in% rownames(loc_mdata)] #get data of lcoation only, based on metadata
if (1<ncol(data.frame(data))){ #If theres only 1 replicate, dont try to do the mean (it gives error)
data<-rowMeans(data) #calculate mean for each gene out of the locations(replicates)
}
return(as.data.frame(data))
}
tissue_data<-levels(metadata$location) #get list of tissue names
d_joint<-sapply(tissue_data, function(tissue_name) rsumer(dataNL, metadata, tissue_name)) #returns an array where each entry is a column with the mean data of the replicates (rows are genes)
repl_data<-as.data.frame(d_joint) #data joint by replicate
colnames(repl_data) = gsub(pattern = "*.data", replacement = "", x = tolower(colnames(repl_data))) #get column names to be only location
rownames(repl_data)<-rownames(dataNL) #rename rows to be genes again
repl_meta<-as.data.frame(colnames(repl_data))
colnames(repl_meta)<-c("location")
View(repl_data)
