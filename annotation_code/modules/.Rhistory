ths<-seq(0,1, by=0.05)
ths_effect<- data.frame(ths, count=sapply(ths, function(t) sum(abs(geneCor)>t))) #count amount of correlations (all positive, as they all contribute)
ggplot(ths_effect, aes(x=ths, y=count))+
geom_line(color=ME, size=2)+
labs(x="Threshold", y="Correlaton count")+
geom_point(size=4)+
theme_bw()
#A good correlation threshold would be 0.7
#select above the diagonal
cor_vals<-geneCor[upper.tri(geneCor)]
#convert to data frame
cor_df<-data.frame(Correlation=cor_vals)
#PLot distribution
ggplot(cor_df, aes(x=Correlation))+
geom_histogram(binwidth=0.05, fill=ME, color="black")+
labs(title="Distribution of correlation values",
x="Correlation Coefficient",
y="Frequency")+
theme_minimal()
#Tends to appear bimodal
set.seed(42)
#Z-score scaling
sc_data<-scale(Nrepl_data)
#scaled pca
sc_pca<-prcomp(sc_data, scale=TRUE)
#pca plot
ggplot(sc_pca$x, aes(x=PC1, y=PC2))+
geom_point(size=3)+
theme_minimal()
#pca PC effect
pca_sum<-summary(sc_pca)
pca_data<-as.data.frame(t(pca_sum$importance))
c_var<-pca_data$`Cumulative Proportion`
PC_c<-1:length(c_var)
#search cutoff
plot(pca_data$`Cumulative Proportion`, xlab="PC component number", ylab="Cumulative variance", main="Elbow plot for PC component cutoff", lwd=2)
abline(v=PC_c[1], col="red", lwd=2)
abline(h=c_var[length(c_var)], col="red", lwd=2)
#function to calculate distance vector (distance to "triangle" corner)
dVector_calculator<-function(xn, yn, point_x, point_y){
#normalize values, including the corner
#x
x_min<-min(xn)
x_range<-max(xn)-x_min
xn_scaled<-(xn-x_min)/x_range
destination_x<-(point_x-x_min)/x_range #target point x coords, scaled
#y
y_min<-min(yn)
y_range<-max(yn)-y_min
yn_scaled<-(yn-y_min)/y_range
destination_y<-(point_y-y_min)/y_range #target point y coords, scaled
#calculate distances
d_x<-(xn_scaled-destination_x)**2
d_y<-(yn_scaled-destination_y)**2
d_vector<-sqrt(d_x+d_y)
return(d_vector)
}
#define corner of the triangle
corner_x<-PC_c[1]
corner_y<-c_var[length(c_var)]
distance_vector<-dVector_calculator(PC_c, c_var, corner_x, corner_y)
plot(distance_vector, xlab="Position", ylab="Distance", main="Distances to corner")
#Objective is closest point to corner (closest to y=0 in plot)
#So the objective is min distance
pc_cutoff<-which.min(distance_vector)
plot(pca_data$`Cumulative Proportion`, xlab="PC component number", ylab="Cumulative variance", main="Elbow plot for PC component cutoff", lwd=2)
abline(v=pc_cutoff, col="blue", lwd=2)
ctf_data<-as.data.frame(sc_pca$x[,1:pc_cutoff])
##aquests son valors transformats?? scikit =fit_transform es el mateix en prcomp q $x? o he d efer .predict?
set.seed(42)
shortened_pca<-prcomp(ctf_data)
shortened_umap<-umap(ctf_data, n_epochs=1500, min_dist=0.9, n_neighbors=35)
set.seed(42)
total_means<-c()
for (k in 1:20){
kmeans_res<-kmeans(ctf_data, k)
mean_res<-mean(kmeans_res$withinss)
total_means<-c(total_means, mean_res)
}
#png("../report/presentation/images/Elbow_kmeans2.png", width=1600, height=800)
plot(1:20, total_means, xlab="NÂº of clusters", ylab="Total means", main="Cluster elbow for Kmeans", type="b", lwd=2)
abline(v=1, col="red", lwd=2)
abline(h=total_means[length(total_means)], col="red", lwd=2)
#abline(v=km_num, col="blue", lwd=2)
#dev.off()
#define corner coordinates
corner_x<-1
corner_y<-total_means[length(total_means)]
#Get distance from each point to corner
distance_vector<-dVector_calculator(1:20, total_means, corner_x, corner_y)
plot(distance_vector, xlab="Position", ylab="Distance", main="Distances to corner", lwd=2)
#choose number of clusters
km_num<-which.min(distance_vector)
set.seed(42)
kres<-kmeans(ctf_data, km_num)
plot(shortened_umap$layout, col=kres$cluster, lwd=3)
setwd("..")
#png("../report/manuscript/images/Kmean_pcaColor.png", width=1600, height=800)
plot(shortened_pca$x, col=kres$cluster, lwd=3, main=paste0("PCA for ", ME, " module\nK-means centroids=", km_num))
#dev.off()
mp<-ncol(ctf_data)+1
#eps: elbow plot, choose shaprest point in bend
kNNdistplot(ctf_data, k=mp)
#3 is chosen, as the other inflection points produce no clusters
dbres<-dbscan(ctf_data, eps=3, minPts=mp)
plot(shortened_umap$layout, col=dbres$cluster+1, lwd=3)
setwd("..") #set path to general annotation_code directory
write.table(geneCor, paste0("./correlation_tables/", ME, "_geneCorrelation.txt"), sep="\t")
library(ggplot2)
library(plotly)
library(ggnewscale)
#read data
dChoice<-"anT_mercator" #anT_mercator, anT_prot-scriber, anT_swissprot
dChoice<-"d_1"
pvdata<-read.table(paste0("./annotation_code/modules/Pres/", dChoice, "_sheet.txt"), sep='\t', header=TRUE)
setwd("~/Desktop/Intership/work/annotation_code/modules")
library(ggplot2)
library(plotly)
library(ggnewscale)
#read data
dChoice<-"anT_mercator" #anT_mercator, anT_prot-scriber, anT_swissprot
dChoice<-"d_1"
pvdata<-read.table(paste0("./annotation_code/modules/Pres/", dChoice, "_sheet.txt"), sep='\t', header=TRUE)
pvdata<-read.table(paste0("../annotation_code/modules/Pres/", dChoice, "_sheet.txt"), sep='\t', header=TRUE)
pvdata<-read.table(paste0("../modules/Pres/", dChoice, "_sheet.txt"), sep='\t', header=TRUE)
#Choose relevant
pvdata$Relevancy<-as.logical(pvdata$Relevancy)
pvdata<-pvdata[pvdata$Relevancy,]
#Get top x significant values
highSig<-sort(pvdata$Pvalue)[1:10]
highSig
sort(pvdata$Pvalue)
#Get top x significant values
highSig<-sort(pvdata$Pvalue)[1:10]
pvdata$TopSig<-pvdata$Pvalue %in% highSig
#plot all values
bareplot<-ggplot(pvdata, aes(x=Function, y=Module))+
geom_point(aes(size=Pvalue, color=Pvalue))+
scale_size(range = c(0, 5), trans="reverse")+
scale_color_continuous(trans="reverse")+
labs(size="P-value", color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))+
guides(color=guide_legend(order=1),
size=guide_legend(order=1))
#highlight significant values(all equal)
hplot<-bareplot+
geom_point(data=subset(pvdata, TopSig), aes(fill=TopSig), color="darkorange", size=7)+
labs(fill="")+scale_fill_hue(labels=c("Highly\nsignificant"))+
guides(fill=guide_legend(order=2))+
theme(legend.text=element_text(size=14))
#highlight significant values(all equal)
hplot<-bareplot+
geom_point(data=subset(pvdata, TopSig), aes(fill=TopSig), color="darkorange", size=7)+
labs(fill="")+scale_fill_hue(labels=c("Highly\nsignificant"))+
guides(fill=guide_legend(order=2))+
theme(legend.text=element_text(size=14))
hplot#+ggtitle(dChoice)
hplot#+ggtitle(dChoice)
#Set up table for significant functions in each module, remove unneeded data
TopSig<-as.data.frame(subset(pvdata, TopSig))
TopSig$TotalCounts<-TopSig$ModuleCounts<-TopSig$Relevancy<-TopSig$TopSig<-NULL
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
TopPlot#+ggtitle(dChoice)
TopSig
TopPlot#+ggtitle(dChoice)
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))+
guides(fill=guide_legend(order=2))
TopPlot#+ggtitle(dChoice)
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_discrete(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_discrete(trans="reverse")
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_discrete()
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0, 0.025, 0.05))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0, 0.025, 0.05))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0, max(TopSig$Pvalue)))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
hplot#+ggtitle(dChoice)
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0, max(TopSig$Pvalue)))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
TopSig$Pvalue
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue)) +
geom_point(size=10) +
scale_color_continuous(
trans = "reverse",
breaks = c(0, 1e-50, 1e-100, 1e-150, 1e-200, 1e-250),
labels = c("0", "1e-50", "1e-100", "1e-150", "1e-200", "<1e-250"),
guide = guide_colourbar(reverse = TRUE)
) +
labs(color="P-value") +
theme_bw() +
theme(
axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt")
)
TopSig
TopSig<-rbind(Topsig, c(NA, 1, NA))
TopSig<-rbind(TopSig, c(NA, 1, NA))
TopSig
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0, max(TopSig$Pvalue)))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
library(ggplot2)
library(plotly)
library(ggnewscale)
#read data
dChoice<-"anT_mercator" #anT_mercator, anT_prot-scriber, anT_swissprot
dChoice<-"d_1"
pvdata<-read.table(paste0("../modules/Pres/", dChoice, "_sheet.txt"), sep='\t', header=TRUE)
#Choose relevant
pvdata$Relevancy<-as.logical(pvdata$Relevancy)
pvdata<-pvdata[pvdata$Relevancy,]
#Get top x significant values
highSig<-sort(pvdata$Pvalue)[1:10]
pvdata$TopSig<-pvdata$Pvalue %in% highSig
#plot all values
bareplot<-ggplot(pvdata, aes(x=Function, y=Module))+
geom_point(aes(size=Pvalue, color=Pvalue))+
scale_size(range = c(0, 5), trans="reverse")+
scale_color_continuous(trans="reverse")+
labs(size="P-value", color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))+
guides(color=guide_legend(order=1),
size=guide_legend(order=1))
#highlight significant values(all equal)
hplot<-bareplot+
geom_point(data=subset(pvdata, TopSig), aes(fill=TopSig), color="darkorange", size=7)+
labs(fill="")+scale_fill_hue(labels=c("Highly\nsignificant"))+
guides(fill=guide_legend(order=2))+
theme(legend.text=element_text(size=14))
hplot#+ggtitle(dChoice)
hplot#+ggtitle(dChoice)
dev.off()
dev.off()
#Set up table for significant functions in each module, remove unneeded data
TopSig<-as.data.frame(subset(pvdata, TopSig))
TopSig$TotalCounts<-TopSig$ModuleCounts<-TopSig$Relevancy<-TopSig$TopSig<-NULL
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0,))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
TopPlot#+ggtitle(dChoice)
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0,"+"))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0,0.1))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(0))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(min(TopSig$Pvalue)))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
min(TopSig$Pvalue,2)
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse", breaks=c(min(TopSig$Pvalue)))+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
TopPlot<-ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
ggplot(TopSig, aes(x=Function, y=Module, color=Pvalue))+
geom_point(size=10)+
scale_color_continuous(trans="reverse")+
labs(color="P-value")+
theme_bw()+
theme(axis.text.x=element_text(angle=45, hjust=1, size=10),
axis.text.y=element_text(size=10),
legend.key.width=unit(1, "cm"),
legend.text=element_text(size=12),
legend.title=element_text(size=16),
plot.background=element_rect(fill="transparent",color="transparent"),
panel.border=element_rect(linewidth=1),
panel.grid.major=element_line(color="grey"),
axis.ticks=element_line(colour="black"),
axis.ticks.length = unit(8, "pt"))
